{"remainingRequest":"/home/handlar/projects/cv/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/handlar/projects/cv/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/home/handlar/projects/cv/src/components/HelloWorld.vue","mtime":1593468373000},{"path":"/home/handlar/projects/cv/node_modules/cache-loader/dist/cjs.js","mtime":1589407431963},{"path":"/home/handlar/projects/cv/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1593531529665},{"path":"/home/handlar/projects/cv/node_modules/cache-loader/dist/cjs.js","mtime":1589407431963},{"path":"/home/handlar/projects/cv/node_modules/vue-loader/lib/index.js","mtime":1593531529665}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImNvcmUtcmFpbCBjb250YWluZXItd2l0aC1zaGFkb3cgcDAiIHJvbGU9Im1haW4iPgogIDxkaXYgaWQ9ImVtYmVyMjUxNyIgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3Ij4KICAgIDxoMj5WYWxlcnkgS2F0c2tlbDwvaDI+CiAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5NaW5zaywgQmVsYXJ1czwvcD4KICAgIDxkaXYgY2xhc3M9ImRpc3BsYXktZmxleCBmbGV4LXdyYXAgbXQ0IG1iMiI+CiAgICAgIDxkaXYgY2xhc3M9InJlc3VtZS1idWlsZGVyLWNvbnRhY3QtaW5mb19fZmllbGQtY29udGFpbmVyIj4KICAgICAgICA8bGktaWNvbgogICAgICAgICAgdHlwZT0iZW52ZWxvcGUtb3Blbi1pY29uIgogICAgICAgICAgY2xhc3M9InJlc3VtZS1idWlsZGVyLWNvbnRhY3QtaW5mb19fZW1haWwtaWNvbiIKICAgICAgICAgIHNpemU9InNtYWxsIgogICAgICAgICAgcm9sZT0iaW1nIgogICAgICAgICAgYXJpYS1sYWJlbD0iRW1haWwiCiAgICAgICAgPgogICAgICAgICAgPHN2ZwogICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgIHZpZXdCb3g9IjAgMCAxNiAxNiIKICAgICAgICAgICAgZGF0YS1zdXBwb3J0ZWQtZHBzPSIxNngxNiIKICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICB3aWR0aD0iMTYiCiAgICAgICAgICAgIGhlaWdodD0iMTYiCiAgICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgZD0iTTE0LjUgMy41Nkw4LjUuMTNBMSAxIDAgMDA4IDBhMSAxIDAgMDAtLjUuMTNsLTYgMy40M2ExIDEgMCAwMC0uNS44N1YxMmExIDEgMCAwMDEgMWgxMmExIDEgMCAwMDEtMVY0LjQzYTEgMSAwIDAwLS41LS44N3pNOCAyLjE1TDEzIDV2LjFMOC4zMSA4YS41Ny41NyAwIDAxLS42NCAwTDMgNS4xMVY1ek0zIDExVjYuMTRsNC4yIDIuNkExLjQ0IDEuNDQgMCAwMDggOWExLjQxIDEuNDEgMCAwMC43OC0uMjRMMTMgNi4xNFYxMUgzeiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgIDwvbGktaWNvbj4KICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5uZS52c2Uuc3JhenVAZ21haWwuY29tPC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0icmVzdW1lLWJ1aWxkZXItY29udGFjdC1pbmZvX19maWVsZC1jb250YWluZXIiPgogICAgICAgIDxsaS1pY29uCiAgICAgICAgICB0eXBlPSJwaG9uZS1oYW5kc2V0LWljb24iCiAgICAgICAgICBjbGFzcz0ibXIxIGdob3N0ZWQiCiAgICAgICAgICBzaXplPSJzbWFsbCIKICAgICAgICAgIHJvbGU9ImltZyIKICAgICAgICAgIGFyaWEtbGFiZWw9IlBob25lIG51bWJlciIKICAgICAgICA+CiAgICAgICAgICA8c3ZnCiAgICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgICAgdmlld0JveD0iMCAwIDE2IDE2IgogICAgICAgICAgICBkYXRhLXN1cHBvcnRlZC1kcHM9IjE2eDE2IgogICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgICAgIHdpZHRoPSIxNiIKICAgICAgICAgICAgaGVpZ2h0PSIxNiIKICAgICAgICAgICAgZm9jdXNhYmxlPSJmYWxzZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBkPSJNNC4xOCAxMS44MkM2LjYyIDE0LjI2IDguNjQgMTUgMTAuNzkgMTVhMy43NiAzLjc2IDAgMDAyLjY2LTEuMWwxLjMyLTEuMzJhLjguOCAwIDAwMC0xLjEzTDExLjYgOC4yOWExIDEgMCAwMC0uNjktLjI5IDEgMSAwIDAwLS40Mi4wOWwtMS42Ny43My0xLjY0LTEuNjQuNzMtMS42N0ExIDEgMCAwMDggNS4wOWExIDEgMCAwMC0uMjktLjY5TDQuNTUgMS4yM2EuOC44IDAgMDAtMS4xMyAwTDIuMSAyLjU1QTMuNzYgMy43NiAwIDAwMSA1LjIxYzAgMi4xNS43NCA0LjE3IDMuMTggNi42MXptMS4yNC0xLjI0Yy0yLjM0LTIuMzQtMi42Ny00LTIuNjctNS4zN2EyIDIgMCAwMS41OS0xLjQyTDQgMy4xNGwyIDItMSAyLjMyTDguNTQgMTFsMi4yOS0xIDIgMi0uNjUuNjVhMiAyIDAgMDEtMS40Mi41OWMtMS4zOC4wMS0zLS4zMS01LjM0LTIuNjZ6IgogICAgICAgICAgICAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgPC9saS1pY29uPgogICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPiszNzUyOTc2ODg2MzI8L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJyZXN1bWUtYnVpbGRlci1jb250YWN0LWluZm9fX2ZpZWxkLWNvbnRhaW5lciI+CiAgICAgICAgPGxpLWljb24KICAgICAgICAgIHR5cGU9ImxpbmtlZGluLWluYnVnLWNvbG9yLWljb24iCiAgICAgICAgICBjbGFzcz0ibXIxIgogICAgICAgICAgc2l6ZT0ic21hbGwiCiAgICAgICAgICByb2xlPSJpbWciCiAgICAgICAgICBhcmlhLWxhYmVsPSJMaW5rZWRJbiBwcm9maWxlIgogICAgICAgID4KICAgICAgICAgIDxzdmcKICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTYgMTYiCiAgICAgICAgICAgIGRhdGEtc3VwcG9ydGVkLWRwcz0iMTZ4MTYiCiAgICAgICAgICAgIHdpZHRoPSIxNiIKICAgICAgICAgICAgaGVpZ2h0PSIxNiIKICAgICAgICAgICAgZm9jdXNhYmxlPSJmYWxzZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBkPSJNMTMuNzUgMUgyLjI1QTEuMjUgMS4yNSAwIDAwMSAyLjI1djExLjVBMS4yNSAxLjI1IDAgMDAyLjI1IDE1aDExLjVBMS4yNSAxLjI1IDAgMDAxNSAxMy43NVYyLjI1QTEuMjUgMS4yNSAwIDAwMTMuNzUgMXoiCiAgICAgICAgICAgICAgZmlsbD0iIzAwNzNiMSIKICAgICAgICAgICAgLz4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBkPSJNNCAyLjY4QTEuMzYgMS4zNiAwIDAwMi42OSA0IDEuMzYgMS4zNiAwIDAwNCA1LjMxIDEuMzYgMS4zNiAwIDAwNS4zMSA0IDEuMzYgMS4zNiAwIDAwNCAyLjY4ek0zIDZoMnY3SDN6TTEwLjI1IDUuODhhMyAzIDAgMDAtMi4zMSAxaC0uMDZWNkg2djdoMnYtM2MwLTEuMTcuNDgtMiAxLjYyLTIgLjkxIDAgMS4zOC42NiAxLjM4IDJ2M2gyVjguODhjMC0xLjg4LS43OS0zLTIuNzUtM3oiCiAgICAgICAgICAgICAgZmlsbD0iI2ZmZiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgIDwvbGktaWNvbj4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3ZhbGVyeWthdHNrZWwvIgogICAgICAgICAgaWQ9ImVtYmVyMjUxOSIKICAgICAgICAgIGNsYXNzPSJsaW5rLXdpdGhvdXQtaG92ZXItdmlzaXRlZCB0LTE0IGVtYmVyLXZpZXciCiAgICAgICAgPmxpbmtlZGluLmNvbS9pbi92YWxlcnlrYXRza2VsPC9hPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9InJlc3VtZS1idWlsZGVyLWNvbnRhY3QtaW5mb19fZmllbGQtY29udGFpbmVyIj4KICAgICAgICA8bGktaWNvbgogICAgICAgICAgdHlwZT0ibGlua2VkaW4taW5idWctY29sb3ItaWNvbiIKICAgICAgICAgIGNsYXNzPSJtcjEiCiAgICAgICAgICBzaXplPSJzbWFsbCIKICAgICAgICAgIHJvbGU9ImltZyIKICAgICAgICAgIGFyaWEtbGFiZWw9IkxpbmtlZEluIHByb2ZpbGUiCiAgICAgICAgPgogICAgICAgICAgPHN2ZwogICAgICAgICAgICBjbGFzcz0ib2N0aWNvbiBvY3RpY29uLW1hcmstZ2l0aHViIHYtYWxpZ24tbWlkZGxlIgogICAgICAgICAgICBoZWlnaHQ9IjE4IgogICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTYgMTYiCiAgICAgICAgICAgIHZlcnNpb249IjEuMSIKICAgICAgICAgICAgd2lkdGg9IjE4IgogICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBmaWxsLXJ1bGU9ImV2ZW5vZGQiCiAgICAgICAgICAgICAgZD0iTTggMEMzLjU4IDAgMCAzLjU4IDAgOGMwIDMuNTQgMi4yOSA2LjUzIDUuNDcgNy41OS40LjA3LjU1LS4xNy41NS0uMzggMC0uMTktLjAxLS44Mi0uMDEtMS40OS0yLjAxLjM3LTIuNTMtLjQ5LTIuNjktLjk0LS4wOS0uMjMtLjQ4LS45NC0uODItMS4xMy0uMjgtLjE1LS42OC0uNTItLjAxLS41My42My0uMDEgMS4wOC41OCAxLjIzLjgyLjcyIDEuMjEgMS44Ny44NyAyLjMzLjY2LjA3LS41Mi4yOC0uODcuNTEtMS4wNy0xLjc4LS4yLTMuNjQtLjg5LTMuNjQtMy45NSAwLS44Ny4zMS0xLjU5LjgyLTIuMTUtLjA4LS4yLS4zNi0xLjAyLjA4LTIuMTIgMCAwIC42Ny0uMjEgMi4yLjgyLjY0LS4xOCAxLjMyLS4yNyAyLS4yNy42OCAwIDEuMzYuMDkgMiAuMjcgMS41My0xLjA0IDIuMi0uODIgMi4yLS44Mi40NCAxLjEuMTYgMS45Mi4wOCAyLjEyLjUxLjU2LjgyIDEuMjcuODIgMi4xNSAwIDMuMDctMS44NyAzLjc1LTMuNjUgMy45NS4yOS4yNS41NC43My41NCAxLjQ4IDAgMS4wNy0uMDEgMS45My0uMDEgMi4yIDAgLjIxLjE1LjQ2LjU1LjM4QTguMDEzIDguMDEzIDAgMDAxNiA4YzAtNC40Mi0zLjU4LTgtOC04eiIKICAgICAgICAgICAgLz4KICAgICAgICAgIDwvc3ZnPgogICAgICAgIDwvbGktaWNvbj4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3ZhbGVyeWthdHNrZWwiCiAgICAgICAgICBpZD0iZW1iZXIyNTE5IgogICAgICAgICAgY2xhc3M9Imxpbmstd2l0aG91dC1ob3Zlci12aXNpdGVkIHQtMTQgZW1iZXItdmlldyIKICAgICAgICA+Z2l0aHViLmNvbS92YWxlcnlrYXRza2VsPC9hPgogICAgICA8L2Rpdj4KICAgICAgPCEtLS0tPgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZW1iZXIyNTIwIiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgIDwhLS0tLT4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgaWQ9ImVtYmVyMjUyMSIgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3Ij4KICAgIDxoMyBjbGFzcz0idC0xOCB0LWJsYWNrIHQtYm9sZCI+U3VtbWFyeTwvaDM+CiAgICA8cCBjbGFzcz0ibXQyIG1iNCB3aGl0ZS1zcGFjZS1wcmUtd3JhcCBicmVhay13b3JkcyB0LTE0IHQtYmxhY2siPgogICAgICA8c3BhbiBkaXI9Imx0ciI+CiAgICAgICAgY29uc3Qgc2tpbGxzID0gKCkgPSZndDsgeyBqYXZhU2NyaXB0OiBbJ2VzNScsICdlczYnXSwgaHRtbDogWydodG1sJywKICAgICAgICAnaHRtbDUnXSwgdGVtcGxhdGVFbmdpbmVzOiBbJ2hhbWwnLCAnc2xpbScsJ3B1ZyddLCBjc3M6IFsnY3NzJywKICAgICAgICAnY3NzMyddLCBjc3NQcmVwcm9jZXNzb3JzOiBbJ3Nhc3MnLCAnc2NzcycsICdsZXNzJ10sIGNzc0ZyYW1ld29ya3M6CiAgICAgICAgWydmb3VuZGF0aW9uJywgJ2FuaW1hdGUuY3NzJ10sIGZyYW1lZm9ya3NBbmRMaWJyYXJpZXM6IFsndnVlLmpzJywKICAgICAgICAncmVhY3QnLCAnalF1ZXJ5J10sIGpzVW5pdFRlc3Rpbmc6IFsnamFzbWluZSddLCBidWlsZFByb2plY3RzOgogICAgICAgIFsnZ3VscCcsICd3ZWJwYWNrJywgJ2dydW50J10sIG90aGVyOiBbJ2Jvb3RzdHJhcCcsICdiaXRidWNrZXQnLAogICAgICAgICdnaXRodWInLCAnc3VibGltZVRleHRFZGl0b3InLCAnYXRvbScsICd2aXN1YWwgc3R1ZGlvIGNvZGUnLAogICAgICAgICdwaG90b3Nob3AnLCAnc3RhY2tvdmVyZmxvdy5jb20nLCAneWVvbWFuLmlvJ10sIH0gLyogSSB3b3JrZWQgYXMgYQogICAgICAgIFNlbmlvciBhbmQgTWlkZGxlIEZyb250LWVuZCBFbmdpbmVlciBvbiBzY2FsYWJsZSBpbnRlcm5hdGlvbmFsCiAgICAgICAgcHJvamVjdHMuIEkgaGF2ZSBleHBlcmllbmNlIHdyaXRpbmcgYXBwbGljYXRpb25zIG9uIFZ1ZS5qcyB1c2luZwogICAgICAgIHZhcmlvdXMgcmVsYXRlZCB0ZWNobm9sb2dpZXMsIHN1Y2ggYXMgVnVleCwgVnVldGlmeSBhbmQgZXRjLiBXaGlsZQogICAgICAgIHdvcmtpbmcgYXQgQWx0b3JvcywgSSBoYWQgZXhwZXJpZW5jZSBjb25kdWN0aW5nIGludGVydmlld3MgZm9yCiAgICAgICAgY2FuZGlkYXRlcyBmb3IgdGhlIHBvc2l0aW9uIG9mIEZyb250LWVuZCBkZXZlbG9wZXIuICovCiAgICAgIDwvc3Bhbj4KICAgIDwvcD4KCiAgICA8ZGl2IGlkPSJlbWJlcjI1MjMiIGNsYXNzPSJlbWJlci12aWV3Ij4KICAgICAgPCEtLS0tPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJlbWJlcjI1MjQiIGNsYXNzPSJlbWJlci12aWV3Ij4KICAgICAgPGRpdiBpZD0iZW1iZXIyNTI1IiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgICAgPCEtLS0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgaWQ9ImVtYmVyMjUyNyIgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3Ij4KICAgIDxoMyBjbGFzcz0idC0xOCB0LWJsYWNrIHQtYm9sZCI+RXhwZXJpZW5jZTwvaDM+CiAgICA8dWw+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFGUmhmVXVRYmgxNVEvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1XU0RxV0s4R2h2eUxkanI0Rko0RlRKRkRoV1N1aGtEd3luRFZqLXJuSmVNIgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIFRVVC5CWSIKICAgICAgICAgIGlkPSJlbWJlcjI1MzEiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdiBjbGFzcz0iZnVsbC13aWR0aCI+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPkZyb250LWVuZCBFbmdpbmVlcjwvaDQ+CiAgICAgICAgICA8IS0tLS0+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNiB0LWJsYWNrIj5UVVQuQlk8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5EZWMgMjAxMyDigJMgUHJlc2VudCAoNiB5cnMgNyBtb3MpPC9wPgogICAgICAgICAgPHAgY2xhc3M9IndoaXRlLXNwYWNlLXByZS13cmFwIGJyZWFrLXdvcmRzIHQtMTQgdC1ibGFjayI+CiAgICAgICAgICAgIDxzcGFuIGRpcj0ibHRyIj4KICAgICAgICAgICAgICBXb3JraW5nIG9uIHRoZSBUVVQuQlkgcG9ydGFsLCBJIHBhcnRpY2lwYXRlIGluIGEgbGFyZ2UgbnVtYmVyCiAgICAgICAgICAgICAgb2YgaW50ZXJlc3RpbmcgcHJvamVjdHMuIERldmVsb3Bpbmcgb2YgbmV3IHNlY3Rpb25zIG9mIHRoZQogICAgICAgICAgICAgIHBvcnRhbCwgdXBkYXRpbmcgZXhpc3Rpbmcgb25lcywgcmVmYWN0b3JpbmcgbGVnYWN5IGNvZGUuIEEgbGFyZ2UKICAgICAgICAgICAgICBudW1iZXIgb2YgZGl2ZXJzZSBpbnRlcmFjdGl2ZSBnYW1lcyBhbmQgcXVpenplcywgYWZmaWxpYXRlCiAgICAgICAgICAgICAgbWF0ZXJpYWxzLiBUZWNobm9sb2dpZXM6IExlc3MsIEh0bWwsIFB1ZywgVnVlLmpzLAogICAgICAgICAgICAgIEphdmFTY3JpcHQKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRSFFOZVppRk8wR1FnL2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9c2ZnZ3hNcWRPTWpRVzI1dmZhUjUzRzNxRndWQjBLSWozZXk5OVlaenlVdyIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBBbHRvcm9zIgogICAgICAgICAgaWQ9ImVtYmVyMjUzNCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2IGNsYXNzPSJmdWxsLXdpZHRoIj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+RnJvbnQtZW5kIEVuZ2luZWVyPC9oND4KICAgICAgICAgIDwhLS0tLT4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE2IHQtYmxhY2siPkFsdG9yb3M8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5GZWIgMjAxMiDigJMgTm92IDIwMTMgKDEgeXIgMTAgbW9zKTwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ3aGl0ZS1zcGFjZS1wcmUtd3JhcCBicmVhay13b3JkcyB0LTE0IHQtYmxhY2siPgogICAgICAgICAgICA8c3BhbiBkaXI9Imx0ciI+CiAgICAgICAgICAgICAgRm9yIGEgc2hvcnQgcGVyaW9kIG9mIHdvcmsgaW4gdGhlIGNvbXBhbnksIEkgdG9vayBwYXJ0IGFzIGEKICAgICAgICAgICAgICBGcm9udGVuZCBkZXZlbG9wZXIgaW4gNSBwcm9qZWN0cy4gVGhlc2Ugd2VyZSBwcm9qZWN0cyBmb3IKICAgICAgICAgICAgICBjdXN0b21lcnMgZnJvbSB2YXJpb3VzIGNvdW50cmllcywgc3VjaCBhcyBOb3J3YXksIHRoZSBVU0EuIFRoZXNlCiAgICAgICAgICAgICAgd2VyZSB2ZXJ5IHZlcnNhdGlsZSBwcm9qZWN0czogZnJvbSBhIHdlYiBhcHBsaWNhdGlvbiBmb3IKICAgICAgICAgICAgICBkZXRlcm1pbmluZyBwb3NzaWJsZSBicmVhc3QgY2FuY2VyIGluIHdvbWVuLCB0byBhIHNvY2lhbCBuZXR3b3JrCiAgICAgICAgICAgICAgZm9yIHBlb3BsZSB3aXRoIGNyZWF0aXZlIHByb2Zlc3Npb25zIChtdXNpY2lhbnMsIGFydGlzdHMsCiAgICAgICAgICAgICAgc2luZ2VycykgYW5kIHNlcnZpY2UgZm9yIGJvb2tpbmcgdGhlIGFwcG9pbnRtZW50IHRpbWUgd2l0aCBhCiAgICAgICAgICAgICAgdmV0ZXJpbmFyaWFuLiBUZWNobm9sb2dpZXM6IENvZmZlZVNjcmlwdCwgSmF2YVNjcmlwdCwgSGFtbCwKICAgICAgICAgICAgICBTYXNzLCBTY3NzLCBCYWNrYm9uZS5qcywgQXBhY2hlIENvcmRvdmEKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL3d3dy5pdmNtZi5ieS9hc3NldHMvdGVtcGxhdGVzL2l2Yy9pbWFnZXMvbG9nby5qcGciCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgSW5mb3JtYXRpb24gQ2VudHJlIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZiBCZWxhcnVzIgogICAgICAgICAgaWQ9ImVtYmVyMjUzNyIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGdob3N0LWNvbXBhbnkgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXYgY2xhc3M9ImZ1bGwtd2lkdGgiPgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj5Tb2Z0d2FyZSBFbmdpbmVlcjwvaDQ+CiAgICAgICAgICA8IS0tLS0+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNiB0LWJsYWNrIj4KICAgICAgICAgICAgSW5mb3JtYXRpb24gQ2VudHJlIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZgogICAgICAgICAgICBCZWxhcnVzCiAgICAgICAgICA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5BdWcgMjAwOCDigJMgSmFuIDIwMTIgKDMgeXJzIDYgbW9zKTwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ3aGl0ZS1zcGFjZS1wcmUtd3JhcCBicmVhay13b3JkcyB0LTE0IHQtYmxhY2siPgogICAgICAgICAgICA8c3BhbiBkaXI9Imx0ciI+CiAgICAgICAgICAgICAgSSB3YXMgZGV2ZWxvcGluZyBuZXcgZnVuY3Rpb25zIGFuZCB3YXMgc3VwcG9ydGluZyB0aGUgd29yayBvZgogICAgICAgICAgICAgIHRoZSBzb2Z0d2FyZSBwYWNrYWdlIGZvciB0aGUgTWFpbiBEZXBhcnRtZW50IG9mIEluc3VyYW5jZQogICAgICAgICAgICAgIFN1cGVydmlzaW9uIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlLiBJIHdhcyBhbHNvIGludm9sdmVkIGluCiAgICAgICAgICAgICAgdGhlIGRldmVsb3BtZW50IG9mIHRoZSBpdmNtZi5ieSB3ZWJzaXRlLCBzdXBwb3J0aW5nIGl0cwogICAgICAgICAgICAgIG9wZXJhYmlsaXR5LiBUZWNobm9sb2dpZXM6IERlbHBoaSwgTVNTUUwsIEhUTUwsIENTUywgUEhQCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPGRpdiBpZD0iZW1iZXIyNTM4IiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgIDwhLS0tLT4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0iZW1iZXIyNTM5IiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgIDxkaXYgaWQ9ImVtYmVyMjU0MCIgY2xhc3M9ImVtYmVyLXZpZXciPgogICAgICAgIDwhLS0tLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGlkPSJlbWJlcjI1NDIiIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc2VjdGlvbi1jb250YWluZXIgZW1iZXItdmlldyI+CiAgICA8aDMgY2xhc3M9InQtMTggdC1ibGFjayB0LWJvbGQiPkVkdWNhdGlvbjwvaDM+CgogICAgPHVsPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNTYwQkFRRUgzblZRQWNEekJBL2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9SWw5TDhuNVE1OHZ3dzFyTmo2Sy00dDRtUDB6aDg1UHdiMlRmekJyUjlsYyIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBQb2xvdHNrIFN0YXRlIFVuaXZlcnNpdHkiCiAgICAgICAgICBpZD0iZW1iZXIyNTQ2IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPlBvbG90c2sgU3RhdGUgVW5pdmVyc2l0eTwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNiB0LWJsYWNrIj5CYWNoZWxvciBvZiBpbmZvcm1hdGlvbiB0ZWNobm9sb2d5LCBTeXN0ZW0gZW5naW5lZXI8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj4yMDAzIOKAkyAyMDA4PC9wPgogICAgICAgICAgPHAgY2xhc3M9IndoaXRlLXNwYWNlLXByZS13cmFwIGJyZWFrLXdvcmRzIHQtMTQgdC1ibGFjayI+CiAgICAgICAgICAgIDxzcGFuIGRpcj0ibHRyIj4KICAgICAgICAgICAgICBQYXNzZWQgdGhlIHN0YXRlIGV4YW0gaW4gdGhlIHNwZWNpYWx0eSB3aXRoIGFuIGFzc2Vzc21lbnQgb2YKICAgICAgICAgICAgICBTRVZFTgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDxkaXYgaWQ9ImVtYmVyMjU0NyIgY2xhc3M9ImVtYmVyLXZpZXciPgogICAgICA8IS0tLS0+CiAgICA8L2Rpdj4KICAgIDxkaXYgaWQ9ImVtYmVyMjU0OCIgY2xhc3M9ImVtYmVyLXZpZXciPgogICAgICA8ZGl2IGlkPSJlbWJlcjI1NDkiIGNsYXNzPSJlbWJlci12aWV3Ij4KICAgICAgICA8IS0tLS0+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBpZD0iZW1iZXIyNTUxIiBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3NlY3Rpb24tY29udGFpbmVyIGVtYmVyLXZpZXciPgogICAgPGgzIGNsYXNzPSJ0LTE4IHQtYmxhY2sgdC1ib2xkIj5MaWNlbnNlcyAmYW1wOyBjZXJ0aWZpY2F0aW9uczwvaDM+CgogICAgPHVsPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRRTBpUlVxU0p1ZVV3L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9eXdOLWhRUGxwV0FkYkRDbHhSY09JUkx0aE95Rk1PRWg5MlNuczBPdFNSOCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBFRiBTdGFuZGFyZCBFbmdsaXNoIFRlc3QgKEVGIFNFVCkgIgogICAgICAgICAgaWQ9ImVtYmVyMjU1NSIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgRUYgU0VUIEVOR0xJU0ggQ0VSVElGSUNBVEUgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkVGIFN0YW5kYXJkIEVuZ2xpc2ggVGVzdCAoRUYgU0VUKTwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgSmFuIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5lZnNldC5vcmcvY2VydC9FOEJMcTMgfCBCMiBVcHBlciBJbnRlcm1lZGlhdGUgfCA1Ni8xMDA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjU1OCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgSmF2YVNjcmlwdCBhbmQgSlNPTjogSW50ZWdyYXRpb24gVGVjaG5pcXVlcyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEphbiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZHB5eUp4bWRJaFRlcXUtaEpjc2RiTU0xRVBUPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI1NjEiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIEludGVyYWN0aXZlIEFuaW1hdGlvbnMgd2l0aCBDU1MgYW5kIEphdmFTY3JpcHQgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBKYW4gMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWVsY1dXTklEUDlScGNzUnZpVU1iMXhRTW44QTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNTY0IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBSZWFjdDogRWNvc3lzdGVtcyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEphbiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBUy02V0cyZDB3R0VDZE1TRjdweHg1M0JUVUJkPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI1NjciCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIExlYXJuaW5nIEVDTUFTY3JpcHQgNiAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEphbiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBVEVIN3RiWWNEMlpvM2NCQmZOcEpyV2JETHlQPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI1NzAiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFZ1ZS5qczogQnVpbGRpbmcgYW4gSW50ZXJmYWNlIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgSmFuIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFaMHBxQThDU2Q0WUpfOFJfcWd1R3QzOURBY3Q8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjU3MyIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgQ1NTOiBBbmltYXRpb24gLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBKYW4gMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVlpSklZU0JfY2YyTXQ1eDk2VFdmNS1CcWpUbzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNTc2IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBMZWFybmluZyB3ZWJwYWNrIDQgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBKYW4gMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVl5a2dHSVc2cFhzZHVZVC1LUzRJWm5uT1ZyNjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNTc5IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBMZWFybmluZyBXZWIgQXVkaW8gYW5kIFZpZGVvIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgSmFuIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFlLXFDRnU2b29vbnhZWDMwdi1jMG1KSkxGYjY8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjU4MiIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgTUVBTiBTdGFjayBhbmQgTW9uZ29EQjogRGV2ZWxvcG1lbnQgVGVjaG5pcXVlcyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEphbiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBY0NEeHh5SmZTYXFmY090Z29mNDRTWERiRmQyPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI1ODUiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIEphdmFTY3JpcHQ6IEFzeW5jIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFTdXdEUHNwaTNvZ2dMUmFDOTBJclJqY3RVaEY8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjU4OCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgSmF2YVNjcmlwdDogQ2xvc3VyZXMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVVDcmtZMWZzQklmU0FDMllmOUtfdGh5c05CTzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNTkxIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBKYXZhU2NyaXB0OiBCZXN0IFByYWN0aWNlcyBmb3IgQ29kZSBGb3JtYXR0aW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFYd0ZNajVTNV8tYnVvd3dEUmhJRko3SkNsS3c8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjU5NCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgSmF2YVNjcmlwdDogU2NvcGUgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVYyRGNnLXdZTEhWaXBUeXpsRVBwN0ZqZS1HUTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNTk3IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBDU1MgTGF5b3V0czogRnJvbSBGbG9hdCB0byBGbGV4Ym94IGFuZCBHcmlkIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFhM0x6V0VxMDU0dGoyVnRITldNX0pFc2hfOEs8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjYwMCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgTGVhcm5pbmcgRnVuY3Rpb25hbCBQcm9ncmFtbWluZyB3aXRoIEphdmFTY3JpcHQgRVM2KyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBWTEwcnYxYU9lZzR4bVJtYmVTaDhmUFpiak5TPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MDMiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIEJ1aWxkaW5nIFJFU1RmdWwgQVBJcyB3aXRoIE5vZGUuanMgYW5kIEV4cHJlc3MgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWJpM0w1WlMtdG8zb1lwaUV1MmJBNVV4MVIxMDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjA2IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBCdWlsZGluZyBhIFdlYnNpdGUgd2l0aCBOb2RlLmpzIGFuZCBFeHByZXNzLmpzICgyMDE4KSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZlJYb1lLVjduTE1INUFkQWU4SUJNY0tYbzRhPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MDkiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIElzb21vcnBoaWMgSmF2YVNjcmlwdCB3aXRoIE1FVk4gU3RhY2sgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVpLVjhPRGpWZXZwaWZ0Z19Lai1fcHBGU1NONjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjEyIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBMZWFybmluZyBWdWUuanMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVI3M0xlTE9HVmE2cTNTVTVubnlGRUlpakZkTzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjE1IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBWdWUuanMgRXNzZW50aWFsIFRyYWluaW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFXNmFrSHFjZEdMemE5Q3VIbVBwTER2OHpxdk08L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjYxOCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgTGVhcm5pbmcgVHlwZVNjcmlwdCAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBV2kyNkp6enNaTG5IRk12X1RVSzczYzV0ek1pPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MjEiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFZ1ZS5qczogRnVsbC1TdGFjayBBcHBsaWNhdGlvbnMgd2l0aCBGaXJlYmFzZSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBVEtYU2tvOVVra2w1TUhKQW1pSzNadWJKbDk3PC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MjQiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIExlYXJuaW5nIFZ1ZXggLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWNMa0hPRGRWNFpZdHJ5eTBxRnlRTWowLV9wUjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjI3IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBCZWNvbWUgYSBWdWUuanMgRGV2ZWxvcGVyIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFjTXR5WFA2M1NacUhMdThIb3JEODlsNEdmWmY8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjYzMCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgSmF2YVNjcmlwdCBFc3NlbnRpYWwgVHJhaW5pbmcgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVZleXBhNDhZamdTQmJ0M090YngxVG1JenZJdDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjMzIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBMZWFybmluZyB0aGUgSmF2YVNjcmlwdCBMYW5ndWFnZSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBWFNaMFFfTTM1ajlaUktfc3k5RTl4MzZvblUzPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MzYiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFJlYWN0OiBDcmVhdGluZyBhbmQgSG9zdGluZyBhIEZ1bGwtU3RhY2sgU2l0ZSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZV9WVURBenZhcWl5NmpKTV82SDJOMnRJaWQwPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2MzkiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIEJvb3RzdHJhcCA0IEVzc2VudGlhbCBUcmFpbmluZyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZTJzMFNsZzBBSzdpOHJuSm9TTFZHeVFXc3lBPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2NDIiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFZ1ZS5qczogV29ya2luZyB3aXRoIEFQSXMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWVRLWxPSjZPcVV0VHAtTFFKVDM4dWtlWXhHWjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjQ1IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBTdWNjZWVkaW5nIGluIFdlYiBEZXZlbG9wbWVudDogRnVsbCBTdGFjayBhbmQgRnJvbnQgRW5kIC0KICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICBjbGFzcz0idC1ub3JtYWwiCiAgICAgICAgICAgID5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFjYllPRWhiR0dnNjJ4RUpTRENRMl9hR0pqZVI8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY0OCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgV2ViIFByb2dyYW1taW5nIEZvdW5kYXRpb25zIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFjNVlGTjdxM21ycDlkLUVmWUd2bUM4X2JDUHQ8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY1MSIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgQ1NTIEVzc2VudGlhbCBUcmFpbmluZyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZG4xV3VkRGlnSHhPb0NsYWtXR2pNRzB1dHFUPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2NTQiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFByb2dyYW1taW5nIEZvdW5kYXRpb25zOiBGdW5kYW1lbnRhbHMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVozSExUWFFIWFJESGJkM0NfS3hucFd2eENjbzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjU3IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBVWCBGb3VuZGF0aW9uczogQWNjZXNzaWJpbGl0eSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZmpKTHhzX3B2M0diMUZ4QmNib05taTdzaUR1PC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2NjAiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFNhc3MgRXNzZW50aWFsIFRyYWluaW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFYM0VGbHVYejBiOU1XVi1mS2VwU1dsaFJsVTU8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY2MyIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgSFRNTCBFc3NlbnRpYWwgVHJhaW5pbmcgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWZiZmQtUHYzZWpoM2VVeHpsVGt6eFR5QWlKSTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjY2IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBMZWFybmluZyBSZWFjdC5qcyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBYmkzeE9wNzYyMHZwY1NQLXZVVG5JQjJieFNQPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2NjkiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIExlYXJuaW5nIEdpdEh1YiAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBUlZMbXpVNEVONTR4OG1faUd0M2Jfcm40STAzPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2NzIiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFJlc3BvbnNpdmUgTGF5b3V0IC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFaaUktUmF3SThWaGFWbG1NUHJYTlg0b0dYa2U8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY3NSIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgQmVjb21lIGEgRnJvbnQtRW5kIFdlYiBEZXZlbG9wZXIgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVVMQU1IM09EbEtpaW5ZUEpnZTVQcUxjTXdXNDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjc4IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBDU1M6IEFkdmFuY2VkIExheW91dHMgd2l0aCBHcmlkIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFaSnpIUnNjWGlLN1ZTUDJJSlRxV3ROQm9qenM8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY4MSIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgVXNlciBFeHBlcmllbmNlIGZvciBXZWIgRGVzaWduIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFmakpMeHNfcHYzR2IxRnhCY2JvTm1pN3NpRHU8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjY4NCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgTUVSTiBFc3NlbnRpYWwgVHJhaW5pbmcgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWFPRzFuenJwWVVOUUNtNmt6QkU2cjM0RENBVzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjg3IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBBbmd1bGFyOiBCdWlsZGluZyBhbiBJbnRlcmZhY2UgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWEzWlotZkRQRU5YeVBoUGdHak5URXI4M3RTRzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjkwIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBSZWFjdC5qcyBFc3NlbnRpYWwgVHJhaW5pbmcgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVdfNmlQRExKZTU1d29aVGdPQnJ5ZDdvRzlVXzwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjkzIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBXZWJwYWNrIGZvciBSZWFjdCBBcHBsaWNhdGlvbnMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVlqMmhpLTRuR1hVNzl5MmN0dnJidWRCY25kRTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNjk2IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBSZWFjdDogVXNpbmcgVHlwZVNjcmlwdCAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZlhkVzVyZVhKdDJIaXBMR3VBZGRpeFF4Q2x0PC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI2OTkiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFJlYWN0OiBCdWlsZGluZyBMYXJnZSBBcHBzIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFXend2NkVTV1F3NXNMYzYzMlYxdWl0UEpWZDI8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjcwMiIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgUmVhY3Q6IFJlcGxhY2luZyBMZWdhY3kgUHJvamVjdHMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVRZeGVZNjV4VXI0UjJDa0Z0VU45WU9vTWlVRTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNzA1IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBSZWFjdDogVGVzdGluZyBhbmQgRGVidWdnaW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFZZ1NOaFk0R0t6cVVTSmExUEYwVWh5aEVBQUw8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjcwOCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgUmVhY3QgZm9yIFdlYiBEZXNpZ25lcnMgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVRNc3VhYzZXYzJXaHdYNXJhTFlKRkcxRmNHbDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNzExIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBHdWxwLmpzOiBXZWIgUHJvamVjdCBXb3JrZmxvd3MgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQWJ0OUJjWEphSFluZFBlcjhNdXRLSG1sNF9XNjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNzE0IgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBKYXZhU2NyaXB0OiBNb2Rlcm4gQnJvd3NlciBBUElzIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFSbzNEejVlOFlvZ0UzMkJwUTRPLWFTc0tmN3Q8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjcxNyIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgVHlwZVNjcmlwdDogVXBncmFkZXMgYW5kIEZlYXR1cmVzIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFYSmh5dUNsV2U4Rm5lRXlQMWQ4YkNRYXBaWFo8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjcyMCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgTGVhcm5pbmcgRnVuY3Rpb25hbCBQcm9ncmFtbWluZyB3aXRoIEphdmFTY3JpcHQgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBGZWIgMjAyMDwvcD4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPkNyZWRlbnRpYWwgSUQgQVRoOGNEMTRjamRObG9jZGE1ckhqeXR4OGFUaDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgICAgPGxpIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiPgogICAgICAgIDxpbWcKICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZhbXA7dj1iZXRhJmFtcDt0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiCiAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgIGFsdD0iTG9nbyBmb3IgTGlua2VkSW4iCiAgICAgICAgICBpZD0iZW1iZXIyNzIzIgogICAgICAgICAgY2xhc3M9ImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIKICAgICAgICAvPgogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDQgY2xhc3M9InQtMTYgdC1ibGFjayB0LWJvbGQiPgogICAgICAgICAgICBWYW5pbGxhIEphdmFTY3JpcHQ6IENsaWVudC1TaWRlIERhdGEgU3RvcmFnZSAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+Q3JlZGVudGlhbCBJRCBBZUFxWktvamFQQ0NlYzNZeDlwSWEyRnI3V05QPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI3MjYiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFR5cGVTY3JpcHQgRXNzZW50aWFsIFRyYWluaW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5DcmVkZW50aWFsIElEIEFZd1JPYzhZaDhjQm92NDFaTy1nZjJ1QW9TUnc8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjcyOSIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgVmFuaWxsYSBKYXZhU2NyaXB0OiBXZWIgV29ya2VycyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPCEtLS0tPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI3MzIiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIFZ1ZS5qcyBmb3IgV2ViIERlc2lnbmVycyAtCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0LW5vcm1hbCI+TGlua2VkSW48L3NwYW4+CiAgICAgICAgICA8L2g0PgogICAgICAgICAgPHAgY2xhc3M9InQtMTQgdC1ibGFjayI+SXNzdWVkIEZlYiAyMDIwPC9wPgogICAgICAgICAgPCEtLS0tPgogICAgICAgIDwvZGl2PgogICAgICA8L2xpPgogICAgICA8bGkgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgPGltZwogICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgc3JjPSJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJmFtcDt2PWJldGEmYW1wO3Q9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIKICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgYWx0PSJMb2dvIGZvciBMaW5rZWRJbiIKICAgICAgICAgIGlkPSJlbWJlcjI3MzUiCiAgICAgICAgICBjbGFzcz0iZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IgogICAgICAgIC8+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoNCBjbGFzcz0idC0xNiB0LWJsYWNrIHQtYm9sZCI+CiAgICAgICAgICAgIEFuZ3VsYXIgRXNzZW50aWFsIFRyYWluaW5nIC0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InQtbm9ybWFsIj5MaW5rZWRJbjwvc3Bhbj4KICAgICAgICAgIDwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0idC0xNCB0LWJsYWNrIj5Jc3N1ZWQgRmViIDIwMjA8L3A+CiAgICAgICAgICA8IS0tLS0+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbGk+CiAgICAgIDxsaSBjbGFzcz0icmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICBzcmM9Imh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmYW1wO3Y9YmV0YSZhbXA7dD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IgogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICBhbHQ9IkxvZ28gZm9yIExpbmtlZEluIgogICAgICAgICAgaWQ9ImVtYmVyMjczOCIKICAgICAgICAgIGNsYXNzPSJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciCiAgICAgICAgLz4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGg0IGNsYXNzPSJ0LTE2IHQtYmxhY2sgdC1ib2xkIj4KICAgICAgICAgICAgUmVhY3Q6IFN0YXRlIE1hbmFnZW1lbnQgLQogICAgICAgICAgICA8c3BhbiBjbGFzcz0idC1ub3JtYWwiPkxpbmtlZEluPC9zcGFuPgogICAgICAgICAgPC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJ0LTE0IHQtYmxhY2siPklzc3VlZCBNYXIgMjAyMDwvcD4KICAgICAgICAgIDwhLS0tLT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPGRpdiBpZD0iZW1iZXIyNzM5IiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgIDwhLS0tLT4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0iZW1iZXIyNzQwIiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgIDxkaXYgaWQ9ImVtYmVyMjc0MSIgY2xhc3M9ImVtYmVyLXZpZXciPgogICAgICAgIDwhLS0tLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KICA8ZGl2IGlkPSJlbWJlcjI3NDIiIGNsYXNzPSJyZXN1bWUtYnVpbGRlcl9fc2VjdGlvbi1jb250YWluZXIgZW1iZXItdmlldyI+CiAgICA8aDMgY2xhc3M9InQtMTggdC1ibGFjayB0LWJvbGQiPlNraWxsczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJ0LTE0IHQtYmxhY2sgcHY0IHBsNiI+CiAgICAgIDxzcGFuIGNsYXNzPSJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCI+SFRNTC9IVE1MNTwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9InJlc3VtZS1idWlsZGVyLXNraWxsLXNlY3Rpb25fX3NraWxsIj5DU1MvQ1NTMyAoUGFzc2VkIExpbmtlZEluIEFzc2Vzc21lbnRzKTwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9InJlc3VtZS1idWlsZGVyLXNraWxsLXNlY3Rpb25fX3NraWxsIj5KYXZhU2NyaXB0IChQYXNzZWQgTGlua2VkSW4gQXNzZXNzbWVudHMpPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0icmVzdW1lLWJ1aWxkZXItc2tpbGwtc2VjdGlvbl9fc2tpbGwiPlZ1ZS5qczwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9InJlc3VtZS1idWlsZGVyLXNraWxsLXNlY3Rpb25fX3NraWxsIj5SZWFjdC5qcyAoUGFzc2VkIExpbmtlZEluIEFzc2Vzc21lbnRzKTwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9InJlc3VtZS1idWlsZGVyLXNraWxsLXNlY3Rpb25fX3NraWxsIj5Gcm9udC1lbmQgRGV2ZWxvcG1lbnQ8L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCI+Q1NTIEFuaW1hdGlvbjwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9InJlc3VtZS1idWlsZGVyLXNraWxsLXNlY3Rpb25fX3NraWxsIj5Ob2RlLmpzPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0icmVzdW1lLWJ1aWxkZXItc2tpbGwtc2VjdGlvbl9fc2tpbGwiPlJFU1Q8L3NwYW4+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJlbWJlcjI3NTMiIGNsYXNzPSJlbWJlci12aWV3Ij4KICAgICAgPCEtLS0tPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJlbWJlcjI3NTQiIGNsYXNzPSJlbWJlci12aWV3Ij4KICAgICAgPGRpdiBpZD0iZW1iZXIyNzU1IiBjbGFzcz0iZW1iZXItdmlldyI+CiAgICAgICAgPCEtLS0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgaWQ9ImVtYmVyMjc1NiIgY2xhc3M9InJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3Ij4KICAgIDxoMyBjbGFzcz0idC0xOCB0LWJsYWNrIHQtYm9sZCI+UHJvamVjdHM8L2gzPgoKICAgIDx1bCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnRzLWJsb2NrX19saXN0IHB2LWFjY29tcGxpc2htZW50cy1ibG9ja19fbGlzdC0taGFzLW1vcmUiPgogICAgICA8bGkKICAgICAgICBpZD0iMjEwNTQwOTcxOCIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1maXJzdCBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciCiAgICAgID4KICAgICAgICA8aDQgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBuYW1lPC9zcGFuPgogICAgICAgICAgRXhwYW5kYWJsZSBiYW5uZXIgZm9yIHNtYXJ0IGRldmljZXMgKHBob25lLCB0YWJsZXQgYW5kIHNvIG9uZSkKICAgICAgICA8L2g0PgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiPkRlYyAyMDE5IOKAkyBGZWIgMjAyMDwvcD4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IGRlc2NyaXB0aW9uPC9zcGFuPgogICAgICAgICAgQSBzbWFsbCBhbmQgZnVubnkgYmFubmVyIGZvciBtb2JpbGUgZGV2aWNlcyBvbmx5LiBZb3UgY2FuIHRhcCBvbiB0aGUgc21hbGwgcGljdHVyZSBvciBwdWxsIGEgc21hbGwgcGljdHVyZSBkb3duIGluIG9yZGVyIHRvIHNob3cgYSBiaWcgcGljdHVyZS4gQWxzbywgeW91IGNhbiB0YXAgb24gYSBidXR0b24gdG8gZXhwYW5kIHRoZSBiYW5uZXIgKHNob3cgYSBiaWcgcGljdHVyZSkuCiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxiciAvPldoZW4gdGhlIGJpZyBwaWN0dXJlIGlzIHNob3duLCB5b3UgY291bGQgdGFwIG9uIGEgYmlnIHBpY3R1cmUuIFdoZW4geW91IHdpbGwgdGFwIG9uIGEgYmlnIHBpY3R1cmUsIHRoZW4geW91IHdpbGwgYmUgcmVkaXJlY3RlZCBieSBsaW5rLgogICAgICAgIDwvcD4KCiAgICAgICAgPCEtLS0tPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL2V4cGFuZGFibGUtYmFubmVyLyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iCiAgICAgICAgICA+U2VlIHByb2plY3QgRXhwYW5kYWJsZSBiYW5uZXIgZm9yIHNtYXJ0IGRldmljZXMgKHBob25lLCB0YWJsZXQgYW5kIHNvIG9uZSk8L3NwYW4+CiAgICAgICAgICBodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL2V4cGFuZGFibGUtYmFubmVyLwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpCiAgICAgICAgaWQ9IjE2NTE1MjUxNDIiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICBSZXNpc3RhbmNlIGlzIGZ1dGlsZQogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+U2VwIDIwMTk8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIFRoaXMgaXMgYSBzcGVjaWFsIHByb2plY3Qgb24gdGhlIFRVVC5CWSBwb3J0YWwgLSB0aGUgc3RvcmllcyBvZiBwZW9wbGUgd2hvIHJlcG9ydGVkIHBvbGljZSB2aW9sZW5jZSBpbiBCZWxhcnVzLgogICAgICAgIDwvcD4KCiAgICAgICAgPCEtLS0tPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3NwZWNpYWwudHV0LmJ5L3N0YXR1cy9zb3Byb3RpdmxlbmllX2Jlc3BvbGV6bm8vIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VlIHByb2plY3QgUmVzaXN0YW5jZSBpcyBmdXRpbGU8L3NwYW4+CiAgICAgICAgICBodHRwczovL3NwZWNpYWwudHV0LmJ5L3N0YXR1cy9zb3Byb3RpdmxlbmllX2Jlc3BvbGV6bm8vCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgICA8bGkKICAgICAgICBpZD0iMTQ3MzE2OTAyOSIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIEdyZWV0aW5nIGNhcmQgd2l0aCBhIGhvbGlkYXkgb24gTWFyY2ggOAogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+TWFyIDIwMTk8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIGh0dHA6Ly9tYXJrZXRpbmcuYnkva2V5c3kvbXV6eWthbG55ZS1rbGlweS1hbmdlbHktaS12b3NtZXJrYS1pei16b250b3Yta2FrLWJlbGFydXNraWUta29tcGFuaWktcG96ZHJhdmx5YXl1dC16aGVuc2hjaGluLwogICAgICAgIDwvcD4KCiAgICAgICAgPCEtLS0tPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3R1dC0yMDE5LThtYXJjaC1qcy8iCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIKICAgICAgICA+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5TZWUgcHJvamVjdCBHcmVldGluZyBjYXJkIHdpdGggYSBob2xpZGF5IG9uIE1hcmNoIDg8L3NwYW4+CiAgICAgICAgICBodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3R1dC0yMDE5LThtYXJjaC1qcy8KICAgICAgICA8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaQogICAgICAgIGlkPSIxMTg0OTc3NzUyIgogICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciCiAgICAgID4KICAgICAgICA8aDQgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBuYW1lPC9zcGFuPgogICAgICAgICAgQ2hyaXN0bWFzJyBzbG90CiAgICAgICAgPC9oND4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0Ij5EZWMgMjAxODwvcD4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IGRlc2NyaXB0aW9uPC9zcGFuPgogICAgICAgICAgQSBtb2RpZmllZCBzbG90IG1hY2hpbmUgaWRlYSB3YXMgaW1wbGVtZW50ZWQgaW4gYW4gaW50ZXJhY3RpdmUgb25saW5lIHBvc3RjYXJkIGZvciBhbGwgcG9ydGFsIHVzZXJzLiBBY3R1YWxseSwgdGhpcyBpcyBhIGdyZWV0aW5nIGdlbmVyYXRvciBmb3IgYSBoYXBweSBuZXcgeWVhci4KICAgICAgICAgIDxiciAvPnNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3ZhbGVyeWthdHNrZWwvaGFwcHktbmV3LXllYXItMjAxOQogICAgICAgICAgPGJyIC8+aW5mbzogaHR0cDovL21hcmtldGluZy5ieS9rZXlzeS90dXQtYnktemFwdXN0aWwtaW50ZXJha3Rpdm55ZS1wcmVkc2themFuaXlhLW5hLWJ1ZHVzaGNoaXktZ29kLXMtc2ltdm9sYW1pLWJlbGFydXNrb2dvLW9ybmFtZW50YS8KICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cudHV0LmJ5L05ZMjAxOS8iCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIKICAgICAgICA+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5TZWUgcHJvamVjdCBDaHJpc3RtYXMnIHNsb3Q8L3NwYW4+CiAgICAgICAgICBodHRwczovL3d3dy50dXQuYnkvTlkyMDE5LwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpCiAgICAgICAgaWQ9IjEwNDYxNDY5NTEiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICBTcGVjaWFsIHByb2plY3Qgb2YgdGhlIHdlYiBwb3J0YWwgVFVULkJZICJDaXR5IERheSwgTWluc2sgaXMgOTUwIHllYXJzIG9sZCIKICAgICAgICA8L2g0PgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiPlNlcCAyMDE3PC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBUaGUgY2FwaXRhbCBvZiBCZWxhcnVzLCB0aGUgY2l0eSBvZiBNaW5zaywgY2VsZWJyYXRlcyBpdHMgOTUwdGggYW5uaXZlcnNhcnkgaW4gMjAxNy4gVFVULkJZIHJlbGVhc2VkIGEgc3BlY2lhbCBwcm9qZWN0IGVzcGVjaWFsbHkgZm9yIHRoaXMgZGF0ZS4gQSBzcGVjaWFsIHByb2plY3QgdGVsbHMgc2V2ZXJhbCBzdG9yaWVzIHJlbGF0ZWQgdG8gdGhlIGxpZmUgb2YgdGhlIGNpdHkuCiAgICAgICAgPC9wPgoKICAgICAgICA8IS0tLS0+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9Imh0dHBzOi8vbmV3cy50dXQuYnkvdGFnLzI0NTAtZGVuLWdvcm9kYS5odG1sIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIKICAgICAgICAgID5TZWUgcHJvamVjdCBTcGVjaWFsIHByb2plY3Qgb2YgdGhlIHdlYiBwb3J0YWwgVFVULkJZICJDaXR5IERheSwgTWluc2sgaXMgOTUwIHllYXJzIG9sZCI8L3NwYW4+CiAgICAgICAgICBodHRwczovL25ld3MudHV0LmJ5L3RhZy8yNDUwLWRlbi1nb3JvZGEuaHRtbAogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpCiAgICAgICAgaWQ9IjEzMzAzMDU2NjIiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICBUaWMgdGFjIHRvZSBnYW1lIG9uIEphdmFTY3JpcHQKICAgICAgICA8L2g0PgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiPkF1ZyAyMDE2PC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBBIHNtYWxsIGdhbWUgdGljIHRhYyB0b2UuIFVubGlrZSB0aGUgc3RhbmRhcmQgNXg1IGdhbWUgYXJlYSwgdGhlIHRlc3QgdGFzayBoYWQgYSBjb25kaXRpb24gdGhhdCB0aGUgcGxheWluZyBmaWVsZCBzaG91bGQgaGF2ZSBhIHNpemUgb2YgMTl4MTkuIFRoZSB3aW5uZXIgaXMgZGV0ZXJtaW5lZCB3aGVuIDUgY3Jvc3NlcyBvciA1IHplcm9lcyBhcmUgY3Jvc3NlZCBvdXQuIE9uZSBvZiB0aGUgY29uZGl0aW9ucyBvZiB0aGUgYXNzaWdubWVudCB3YXMgbm90IHRvIHVzZSBhbnkgZnJhbWV3b3JrLgogICAgICAgIDwvcD4KCiAgICAgICAgPCEtLS0tPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3RpYy10YWMtdG9lLyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlZSBwcm9qZWN0IFRpYyB0YWMgdG9lIGdhbWUgb24gSmF2YVNjcmlwdDwvc3Bhbj4KICAgICAgICAgIGh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdGljLXRhYy10b2UvCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgICA8bGkKICAgICAgICBpZD0iMjAwMTc0ODQzNyIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIE1lenVrYSBMTEMKICAgICAgICA8L2g0PgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiPk1heSAyMDE1PC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBTdGFjayBvZiB0ZWNobm9sb2dpZXM6IFJ1YnksIEFuZ3VsYXIsIFNhc3MsIEhhbWwuCiAgICAgICAgICA8YnIgLz5JIHdhcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgbmV3IEhUTUwgbWFya3VwcyAoZW1haWwgdGVtcGxhdGVzIGluY2x1ZGVkKSwgbWFrZSBzb21lIGNoYW5nZXMgaW4gQW5ndWxhciBkaXJlY3RpdmVzLgogICAgICAgIDwvcD4KCiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9Imh0dHA6Ly9tZXp1a2EuY29tIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VlIHByb2plY3QgTWV6dWthIExMQzwvc3Bhbj4KICAgICAgICAgIGh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdmFscHJvamVjdHMubWV6dWthLW1haWwvCiAgICAgICAgPC9hPgoKICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cDovL21lenVrYS5jb20iCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIKICAgICAgICA+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5TZWUgcHJvamVjdCBNZXp1a2EgTExDPC9zcGFuPgogICAgICAgICAgaHR0cDovL21lenVrYS5jb20KICAgICAgICA8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaQogICAgICAgIGlkPSIxMzMxMjg0MTUwIgogICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciCiAgICAgID4KICAgICAgICA8aDQgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBuYW1lPC9zcGFuPgogICAgICAgICAgQnViYmxlYm9vbS5ieQogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+T2N0IDIwMTQ8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIFVuZm9ydHVuYXRlbHksIHRoaXMgcHJvamVjdCBpcyBubyBsb25nZXIgYWxpdmUsIGJ1dCB3b3JrIChIVE1MIG1hcmt1cCkgd2FzIGRvbmUgYW5kIHlvdSBjYW4gc2VlIGl0IGluIG15IEdpdEh1YiByZXBvc2l0b3J5IGh0dHBzOi8vZ2l0aHViLmNvbS92YWxlcnlrYXRza2VsL3ZhbHByb2plY3RzLmJ1YmJsZWJvb20KICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5idWJibGVib29tLyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlZSBwcm9qZWN0IEJ1YmJsZWJvb20uYnk8L3NwYW4+CiAgICAgICAgICBodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLmJ1YmJsZWJvb20vCiAgICAgICAgPC9hPgogICAgICA8L2xpPgoKICAgICAgPGxpCiAgICAgICAgaWQ9IjE1MTY3NzkyNCIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIE1JQlMgVHJhdmVsCiAgICAgICAgPC9oND4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0Ij5BcHIgMjAxMCDigJMgTm92IDIwMTM8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIEN1cnJlbnRseSwgb24gdGhlIHNwZWNpZmllZCBkb21haW4sIHlvdSBjYW4gc2VlIGEgd2ViIHNpdGUgYWZ0ZXIgdGhlIHJlZGVzaWduLiBCdXQgeW91IGNhbiBzZWUgc2F2ZWQgdmVyc2lvbiBvbiB3ZWIuYXJjaGl2ZS5vcmcgd2hpY2ggSSd2ZSBkZXZlbG9wZWQKICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cDovL3d3dy5taWJzLnJ1LyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlZSBwcm9qZWN0IE1JQlMgVHJhdmVsPC9zcGFuPgogICAgICAgICAgd2ViLmFyY2hpdmUub3JnL3dlYi8yMDExMDgxNjEyMDU1Mi9odHRwOi8vd3d3Lm1pYnMucnUvCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgICA8bGkKICAgICAgICBpZD0iMTMzNjM2NzA3NiIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIGRlY29yLXYtZG9tLnJ1CiAgICAgICAgPC9oND4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0Ij5BdWcgMjAxMzwvcD4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IGRlc2NyaXB0aW9uPC9zcGFuPgogICAgICAgICAgVGhpcyB3YXMgYSBzbWFsbCBsYW5kaW5nIHBhZ2UuIE5vd2FkYXlzIHRoaXMgY29tcGFueSBpcyBubyBsb25nZXIgYWxpdmUuCiAgICAgICAgPC9wPgoKICAgICAgICA8IS0tLS0+CiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9Imh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdmFscHJvamVjdHMuZGVjb3Itdi1kb20vIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VlIHByb2plY3QgZGVjb3Itdi1kb20ucnU8L3NwYW4+CiAgICAgICAgICBodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLmRlY29yLXYtZG9tLwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpCiAgICAgICAgaWQ9IjIwNjY2MDk3ODIiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICBOZWtvcywgdGhlIEFkdmVydGlzaW5nIGFnZW5jeQogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+SmFuIDIwMTMg4oCTIEp1biAyMDEzPC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBXaGlsZSB3b3JraW5nIG9uIHRoaXMgcHJvamVjdCwgSSBzZXJ2ZWQgYXMgYSBmdWxsLXN0YWNrIGRldmVsb3Blci4gRnJvbnRlbmQgKEhUTUwgbGF5b3V0ICsgalF1ZXJ5KSBCYWNrZW5kIChNT0R4LCBNeVNRTCBkYXRhYmFzZSkKICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cDovL25la29zLnJ1LyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlZSBwcm9qZWN0IE5la29zLCB0aGUgQWR2ZXJ0aXNpbmcgYWdlbmN5PC9zcGFuPgogICAgICAgICAgaHR0cDovL25la29zLnJ1LwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgICAgPGxpCiAgICAgICAgaWQ9IjI3IgogICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciCiAgICAgID4KICAgICAgICA8aDQgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBuYW1lPC9zcGFuPgogICAgICAgICAgQ3Jvc3NBcnRzCiAgICAgICAgPC9oND4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0Ij5KdWwgMjAxMiDigJMgTWF5IDIwMTM8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIFNvY2lhbCBuZXR3b3JrIGZvciBjcmVhdGl2ZSBwZW9wbGUKICAgICAgICAgIDxiciAvPkJ1aWx0IG9uIFJvUiB1c2luZyBzY3J1bSwgc2FzcywgY29mZmVlc2NyaXB0LCBzcGluZSwgZXRjCiAgICAgICAgPC9wPgoKICAgICAgICA8IS0tLS0+CiAgICAgIDwvbGk+CiAgICAgIDxsaQogICAgICAgIGlkPSIxMjgyNDA1NDUiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICBPZmZpY2lhbCB3ZWJzaXRlIG9mIEluZm9ybWF0aW9uIGFuZCBDb21wdXRpbmcgQ2VudGVyIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZiBCZWxhcnVzCiAgICAgICAgPC9oND4KCiAgICAgICAgPHAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0Ij5BdWcgMjAwOCDigJMgRGVjIDIwMTE8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIFRvZGF5IHRoaXMgd2Vic2l0ZSBsb29rcyBkaWZmZXJlbnQuIEJ1dCB5b3UgY2FuIHNlZSB0aGUgcHJldmlvdXMgdmVyc2lvbiBvbiB3ZWIuYXJjaGl2ZS5vcmcsIHdoaWNoIEkndmUgY3JlYXRlZAogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8YnIgLz4KICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cuaXZjbWYuYnkvIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiIKICAgICAgICAgID5TZWUgcHJvamVjdCBPZmZpY2lhbCB3ZWJzaXRlIG9mIEluZm9ybWF0aW9uIGFuZCBDb21wdXRpbmcgQ2VudGVyIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZiBCZWxhcnVzPC9zcGFuPgogICAgICAgICAgaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMTAxMjYwMjE4MTAvaHR0cDovL3d3dy5pdmNtZi5ieS8KICAgICAgICA8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaQogICAgICAgIGlkPSIxMDQ2NTk5NTIiCiAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIKICAgICAgPgogICAgICAgIDxoNCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Qcm9qZWN0IG5hbWU8L3NwYW4+CiAgICAgICAgICByZW1tby5ieQogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+TWF5IDIwMTEg4oCTIE9jdCAyMDExPC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBUaGUgc3RhY2sgb2YgdGVjaG5vbG9naWVzOiBDU1MsIEhUTUwsIFBob3Rvc2hvcAogICAgICAgICAgPGJyIC8+SSB3YXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIG5ldyBIVE1MIGxheW91dHMgdXNpbmcgKi5QU0Qgc291cmNlcy4KICAgICAgICAgIDxiciAvPk9yaWdpbmFsIHByb2plY3QgcmVtbW8uYnkgd2FzIHJlbW92ZWQgYXQgdGhpcyB0aW1lCiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxiciAvPkJ1dCBZb3UgY2FuIHNlZSBhIHNhdmVkIHZlcnNpb24gb24gd2ViLmFyY2hpdmUub3JnCiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxiciAvPk9yaWdpbmFsIGRlc2lnbiBieSBSdXNldHNreSBSdXNsYW4gYWthIHJkZXNpZ25lciBpcyBoZXJlOiBodHRwOi8vYXJjaGl2ZS5yZGVzaWduZXIucnUvY29tcG9uZW50L29wdGlvbixjb21fanBvcnRmb2xpby9JdGVtaWQsMzAvY2F0LDE0MC8KICAgICAgICA8L3A+CgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEyMDUyMjE3MTcwMy9odHRwOi8vcmVtbW8uYnkvIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VlIHByb2plY3QgcmVtbW8uYnk8L3NwYW4+CiAgICAgICAgICBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEyMDUyMjE3MTcwMy9odHRwOi8vcmVtbW8uYnkvCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgICA8bGkKICAgICAgICBpZD0iMTI2MzQzMDU0OSIKICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIEF2YWwgSW52ZXN0IFJlYWx0eQogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+RmViIDIwMTAg4oCTIEphbiAyMDExPC9wPgoKICAgICAgICA8cCBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0Ij4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgZGVzY3JpcHRpb248L3NwYW4+CiAgICAgICAgICBUaGlzIGlzIG9uZSBvZiBteSBmaXJzdCBwcm9qZWN0cy4gSXQgd2FzIGFuIEFwcmlsIG9mIDIwMTAuLi4gSXQgd2FzIGFuIElFNidzIHRpbWUuLi4gSXQgd2FzIGZ1bGwgb2YgZW5lcmd5IGFuZCBpdCB3YXMgbmVjZXNzYXJ5IHRvIHRha2UgaW50byBhY2NvdW50IGhpcyB3aXNoZXMgbGlrZSBhcyBQTkcsIG1heC13aWR0aCBhbmQgbW9yZSBhbmQgbW9yZS4uLiBOb3dhZGF5cyB0aGlzIGNvbXBhbnkgYW5kIGl0cyB3ZWJzaXRlcyBhcmUgbm8gbG9uZ2VyIGFsaXZlLiBJIGRlcGxveWVkIGEgYmFja3VwICh0aGUgbGF0ZXN0IHZlcnNpb24gdGhhdCBJIGhhZCkgdG8gc2hvdyB0aGUgd29yayB0aGF0IEkgZGlkLiBUaGlzIGlzIE9OTFkgREVNTywgTk9UIFJFQUwgU0VSVklDRS4gWW91IGNhbiBzZWUgc291cmNlIGZvcm0gSFRNTCBtYXJrdXAgb24gR2l0SHViIGh0dHBzOi8vZ2l0aHViLmNvbS92YWxlcnlrYXRza2VsL3ZhbHByb2plY3RzLmF2YWwKICAgICAgICA8L3A+CgogICAgICAgIDwhLS0tLT4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5hdmFsLyIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgY2xhc3M9InB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIgogICAgICAgID4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlNlZSBwcm9qZWN0IEF2YWwgSW52ZXN0IFJlYWx0eTwvc3Bhbj4KICAgICAgICAgIGh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdmFscHJvamVjdHMuYXZhbC8KICAgICAgICA8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaQogICAgICAgIGlkPSIxNDQ3MjUyNDUwIgogICAgICAgIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWxhc3QgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IgogICAgICA+CiAgICAgICAgPGg0IGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlByb2plY3QgbmFtZTwvc3Bhbj4KICAgICAgICAgIENsaW5pYyBvZiBEci4gTmFtaW5vdgogICAgICAgIDwvaDQ+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCI+U2VwIDIwMTA8L3A+CgogICAgICAgIDxwIGNsYXNzPSJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJvamVjdCBkZXNjcmlwdGlvbjwvc3Bhbj4KICAgICAgICAgIFRoaXMgSFRNTCBtYXJrdXAgd2FzIGRvbmUgaW4gU2VwdGVtYmVyIG9mIDIwMTAuIEl0IHdhcyBvbmx5IG9uZSBwYWdlLCB0aGUgaG9tZSBwYWdlLgogICAgICAgIDwvcD4KCiAgICAgICAgPCEtLS0tPgogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLm5hbWlub3YvIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICBjbGFzcz0icHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiCiAgICAgICAgPgogICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U2VlIHByb2plY3QgQ2xpbmljIG9mIERyLiBOYW1pbm92PC9zcGFuPgogICAgICAgICAgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5uYW1pbm92LwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CjwvZGl2Pgo="},null]}