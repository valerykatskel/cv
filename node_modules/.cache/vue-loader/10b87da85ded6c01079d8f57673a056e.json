{"remainingRequest":"/home/handlar/projects/cv/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/handlar/projects/cv/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/handlar/projects/cv/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/handlar/projects/cv/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/home/handlar/projects/cv/src/components/HelloWorld.vue","mtime":1593468373000},{"path":"/home/handlar/projects/cv/node_modules/cache-loader/dist/cjs.js","mtime":1589407431963},{"path":"/home/handlar/projects/cv/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1593531529665},{"path":"/home/handlar/projects/cv/node_modules/cache-loader/dist/cjs.js","mtime":1589407431963},{"path":"/home/handlar/projects/cv/node_modules/vue-loader/lib/index.js","mtime":1593531529665}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAiY29yZS1yYWlsIGNvbnRhaW5lci13aXRoLXNoYWRvdyBwMCIsCiAgICAgIGF0dHJzOiB7IHJvbGU6ICJtYWluIiB9CiAgICB9LAogICAgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3IiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTE3IiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJWYWxlcnkgS2F0c2tlbCIpXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFtfdm0uX3YoIk1pbnNrLCBCZWxhcnVzIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZGlzcGxheS1mbGV4IGZsZXgtd3JhcCBtdDQgbWIyIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1jb250YWN0LWluZm9fX2ZpZWxkLWNvbnRhaW5lciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpLWljb24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1jb250YWN0LWluZm9fX2VtYWlsLWljb24iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZW52ZWxvcGUtb3Blbi1pY29uIiwKICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbWFsbCIsCiAgICAgICAgICAgICAgICAgICAgICByb2xlOiAiaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIkVtYWlsIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNiAxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtc3VwcG9ydGVkLWRwcyI6ICIxNngxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogImN1cnJlbnRDb2xvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZTogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk0xNC41IDMuNTZMOC41LjEzQTEgMSAwIDAwOCAwYTEgMSAwIDAwLS41LjEzbC02IDMuNDNhMSAxIDAgMDAtLjUuODdWMTJhMSAxIDAgMDAxIDFoMTJhMSAxIDAgMDAxLTFWNC40M2ExIDEgMCAwMC0uNS0uODd6TTggMi4xNUwxMyA1di4xTDguMzEgOGEuNTcuNTcgMCAwMS0uNjQgMEwzIDUuMTFWNXpNMyAxMVY2LjE0bDQuMiAyLjZBMS40NCAxLjQ0IDAgMDA4IDlhMS40MSAxLjQxIDAgMDAuNzgtLjI0TDEzIDYuMTRWMTFIM3oiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIm5lLnZzZS5zcmF6dUBnbWFpbC5jb20iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyLWNvbnRhY3QtaW5mb19fZmllbGQtY29udGFpbmVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGktaWNvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yMSBnaG9zdGVkIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInBob25lLWhhbmRzZXQtaWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgICAgICAgICAgICAgcm9sZTogImltZyIsCiAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJQaG9uZSBudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE2IDE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1zdXBwb3J0ZWQtZHBzIjogIjE2eDE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAiY3VycmVudENvbG9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTTQuMTggMTEuODJDNi42MiAxNC4yNiA4LjY0IDE1IDEwLjc5IDE1YTMuNzYgMy43NiAwIDAwMi42Ni0xLjFsMS4zMi0xLjMyYS44LjggMCAwMDAtMS4xM0wxMS42IDguMjlhMSAxIDAgMDAtLjY5LS4yOSAxIDEgMCAwMC0uNDIuMDlsLTEuNjcuNzMtMS42NC0xLjY0LjczLTEuNjdBMSAxIDAgMDA4IDUuMDlhMSAxIDAgMDAtLjI5LS42OUw0LjU1IDEuMjNhLjguOCAwIDAwLTEuMTMgMEwyLjEgMi41NUEzLjc2IDMuNzYgMCAwMDEgNS4yMWMwIDIuMTUuNzQgNC4xNyAzLjE4IDYuNjF6bTEuMjQtMS4yNGMtMi4zNC0yLjM0LTIuNjctNC0yLjY3LTUuMzdhMiAyIDAgMDEuNTktMS40Mkw0IDMuMTRsMiAyLTEgMi4zMkw4LjU0IDExbDIuMjktMSAyIDItLjY1LjY1YTIgMiAwIDAxLTEuNDIuNTljLTEuMzguMDEtMy0uMzEtNS4zNC0yLjY2eiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiKzM3NTI5NzY4ODYzMiIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXItY29udGFjdC1pbmZvX19maWVsZC1jb250YWluZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaS1pY29uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXIxIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogImxpbmtlZGluLWluYnVnLWNvbG9yLWljb24iLAogICAgICAgICAgICAgICAgICAgICAgc2l6ZTogInNtYWxsIiwKICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAiTGlua2VkSW4gcHJvZmlsZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTYgMTYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXN1cHBvcnRlZC1kcHMiOiAiMTZ4MTYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGU6ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNMTMuNzUgMUgyLjI1QTEuMjUgMS4yNSAwIDAwMSAyLjI1djExLjVBMS4yNSAxLjI1IDAgMDAyLjI1IDE1aDExLjVBMS4yNSAxLjI1IDAgMDAxNSAxMy43NVYyLjI1QTEuMjUgMS4yNSAwIDAwMTMuNzUgMXoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIiMwMDczYjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNNCAyLjY4QTEuMzYgMS4zNiAwIDAwMi42OSA0IDEuMzYgMS4zNiAwIDAwNCA1LjMxIDEuMzYgMS4zNiAwIDAwNS4zMSA0IDEuMzYgMS4zNiAwIDAwNCAyLjY4ek0zIDZoMnY3SDN6TTEwLjI1IDUuODhhMyAzIDAgMDAtMi4zMSAxaC0uMDZWNkg2djdoMnYtM2MwLTEuMTcuNDgtMiAxLjYyLTIgLjkxIDAgMS4zOC42NiAxLjM4IDJ2M2gyVjguODhjMC0xLjg4LS43OS0zLTIuNzUtM3oiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogIiNmZmYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxpbmstd2l0aG91dC1ob3Zlci12aXNpdGVkIHQtMTQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vdmFsZXJ5a2F0c2tlbC8iLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1MTkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJsaW5rZWRpbi5jb20vaW4vdmFsZXJ5a2F0c2tlbCIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXItY29udGFjdC1pbmZvX19maWVsZC1jb250YWluZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaS1pY29uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXIxIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogImxpbmtlZGluLWluYnVnLWNvbG9yLWljb24iLAogICAgICAgICAgICAgICAgICAgICAgc2l6ZTogInNtYWxsIiwKICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJpbWciLAogICAgICAgICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAiTGlua2VkSW4gcHJvZmlsZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAib2N0aWNvbiBvY3RpY29uLW1hcmstZ2l0aHViIHYtYWxpZ24tbWlkZGxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxNiAxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogIjEuMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmlsbC1ydWxlIjogImV2ZW5vZGQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk04IDBDMy41OCAwIDAgMy41OCAwIDhjMCAzLjU0IDIuMjkgNi41MyA1LjQ3IDcuNTkuNC4wNy41NS0uMTcuNTUtLjM4IDAtLjE5LS4wMS0uODItLjAxLTEuNDktMi4wMS4zNy0yLjUzLS40OS0yLjY5LS45NC0uMDktLjIzLS40OC0uOTQtLjgyLTEuMTMtLjI4LS4xNS0uNjgtLjUyLS4wMS0uNTMuNjMtLjAxIDEuMDguNTggMS4yMy44Mi43MiAxLjIxIDEuODcuODcgMi4zMy42Ni4wNy0uNTIuMjgtLjg3LjUxLTEuMDctMS43OC0uMi0zLjY0LS44OS0zLjY0LTMuOTUgMC0uODcuMzEtMS41OS44Mi0yLjE1LS4wOC0uMi0uMzYtMS4wMi4wOC0yLjEyIDAgMCAuNjctLjIxIDIuMi44Mi42NC0uMTggMS4zMi0uMjcgMi0uMjcuNjggMCAxLjM2LjA5IDIgLjI3IDEuNTMtMS4wNCAyLjItLjgyIDIuMi0uODIuNDQgMS4xLjE2IDEuOTIuMDggMi4xMi41MS41Ni44MiAxLjI3LjgyIDIuMTUgMCAzLjA3LTEuODcgMy43NS0zLjY1IDMuOTUuMjkuMjUuNTQuNzMuNTQgMS40OCAwIDEuMDctLjAxIDEuOTMtLjAxIDIuMiAwIC4yMS4xNS40Ni41NS4zOEE4LjAxMyA4LjAxMyAwIDAwMTYgOGMwLTQuNDItMy41OC04LTgtOHoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxpbmstd2l0aG91dC1ob3Zlci12aXNpdGVkIHQtMTQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdmFsZXJ5a2F0c2tlbCIsCiAgICAgICAgICAgICAgICAgICAgICBpZDogImVtYmVyMjUxOSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoImdpdGh1Yi5jb20vdmFsZXJ5a2F0c2tlbCIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZW1iZXItdmlldyIsIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTIwIiB9IH0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX20oMCksCiAgICAgIF92bS5fbSgxKSwKICAgICAgX3ZtLl9tKDIpLAogICAgICBfdm0uX20oMyksCiAgICAgIF92bS5fbSg0KSwKICAgICAgX3ZtLl9tKDUpCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3IiwKICAgICAgICBhdHRyczogeyBpZDogImVtYmVyMjUyMSIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInQtMTggdC1ibGFjayB0LWJvbGQiIH0sIFtfdm0uX3YoIlN1bW1hcnkiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm10MiBtYjQgd2hpdGUtc3BhY2UtcHJlLXdyYXAgYnJlYWstd29yZHMgdC0xNCB0LWJsYWNrIgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7IGRpcjogImx0ciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBjb25zdCBza2lsbHMgPSAoKSA9PiB7IGphdmFTY3JpcHQ6IFsnZXM1JywgJ2VzNiddLCBodG1sOiBbJ2h0bWwnLCAnaHRtbDUnXSwgdGVtcGxhdGVFbmdpbmVzOiBbJ2hhbWwnLCAnc2xpbScsJ3B1ZyddLCBjc3M6IFsnY3NzJywgJ2NzczMnXSwgY3NzUHJlcHJvY2Vzc29yczogWydzYXNzJywgJ3Njc3MnLCAnbGVzcyddLCBjc3NGcmFtZXdvcmtzOiBbJ2ZvdW5kYXRpb24nLCAnYW5pbWF0ZS5jc3MnXSwgZnJhbWVmb3Jrc0FuZExpYnJhcmllczogWyd2dWUuanMnLCAncmVhY3QnLCAnalF1ZXJ5J10sIGpzVW5pdFRlc3Rpbmc6IFsnamFzbWluZSddLCBidWlsZFByb2plY3RzOiBbJ2d1bHAnLCAnd2VicGFjaycsICdncnVudCddLCBvdGhlcjogWydib290c3RyYXAnLCAnYml0YnVja2V0JywgJ2dpdGh1YicsICdzdWJsaW1lVGV4dEVkaXRvcicsICdhdG9tJywgJ3Zpc3VhbCBzdHVkaW8gY29kZScsICdwaG90b3Nob3AnLCAnc3RhY2tvdmVyZmxvdy5jb20nLCAneWVvbWFuLmlvJ10sIH0gLyogSSB3b3JrZWQgYXMgYSBTZW5pb3IgYW5kIE1pZGRsZSBGcm9udC1lbmQgRW5naW5lZXIgb24gc2NhbGFibGUgaW50ZXJuYXRpb25hbCBwcm9qZWN0cy4gSSBoYXZlIGV4cGVyaWVuY2Ugd3JpdGluZyBhcHBsaWNhdGlvbnMgb24gVnVlLmpzIHVzaW5nIHZhcmlvdXMgcmVsYXRlZCB0ZWNobm9sb2dpZXMsIHN1Y2ggYXMgVnVleCwgVnVldGlmeSBhbmQgZXRjLiBXaGlsZSB3b3JraW5nIGF0IEFsdG9yb3MsIEkgaGFkIGV4cGVyaWVuY2UgY29uZHVjdGluZyBpbnRlcnZpZXdzIGZvciBjYW5kaWRhdGVzIGZvciB0aGUgcG9zaXRpb24gb2YgRnJvbnQtZW5kIGRldmVsb3Blci4gKi8gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZW1iZXItdmlldyIsIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTIzIiB9IH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZW1iZXItdmlldyIsIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTI0IiB9IH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZW1iZXItdmlldyIsIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTI1IiB9IH0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zZWN0aW9uLWNvbnRhaW5lciBlbWJlci12aWV3IiwKICAgICAgICBhdHRyczogeyBpZDogImVtYmVyMjUyNyIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInQtMTggdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgIF92bS5fdigiRXhwZXJpZW5jZSIpCiAgICAgICAgXSksCiAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRRlJoZlV1UWJoMTVRL2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PVdTRHFXSzhHaHZ5TGRqcjRGSjRGVEpGRGhXU3Voa0R3eW5EVmotcm5KZU0iLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgVFVULkJZIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTMxIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnVsbC13aWR0aCIgfSwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkZyb250LWVuZCBFbmdpbmVlciIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIiB9LCBbX3ZtLl92KCJUVVQuQlkiKV0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEZWMgMjAxMyDigJMgUHJlc2VudCAoNiB5cnMgNyBtb3MpIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3aGl0ZS1zcGFjZS1wcmUtd3JhcCBicmVhay13b3JkcyB0LTE0IHQtYmxhY2siCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgZGlyOiAibHRyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFdvcmtpbmcgb24gdGhlIFRVVC5CWSBwb3J0YWwsIEkgcGFydGljaXBhdGUgaW4gYSBsYXJnZSBudW1iZXIgb2YgaW50ZXJlc3RpbmcgcHJvamVjdHMuIERldmVsb3Bpbmcgb2YgbmV3IHNlY3Rpb25zIG9mIHRoZSBwb3J0YWwsIHVwZGF0aW5nIGV4aXN0aW5nIG9uZXMsIHJlZmFjdG9yaW5nIGxlZ2FjeSBjb2RlLiBBIGxhcmdlIG51bWJlciBvZiBkaXZlcnNlIGludGVyYWN0aXZlIGdhbWVzIGFuZCBxdWl6emVzLCBhZmZpbGlhdGUgbWF0ZXJpYWxzLiBUZWNobm9sb2dpZXM6IExlc3MsIEh0bWwsIFB1ZywgVnVlLmpzLCBKYXZhU2NyaXB0ICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFIUU5lWmlGTzBHUWcvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9c2ZnZ3hNcWRPTWpRVzI1dmZhUjUzRzNxRndWQjBLSWozZXk5OVlaenlVdyIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBBbHRvcm9zIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTM0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnVsbC13aWR0aCIgfSwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkZyb250LWVuZCBFbmdpbmVlciIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIiB9LCBbX3ZtLl92KCJBbHRvcm9zIildKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRmViIDIwMTIg4oCTIE5vdiAyMDEzICgxIHlyIDEwIG1vcykiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIndoaXRlLXNwYWNlLXByZS13cmFwIGJyZWFrLXdvcmRzIHQtMTQgdC1ibGFjayIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBhdHRyczogeyBkaXI6ICJsdHIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgRm9yIGEgc2hvcnQgcGVyaW9kIG9mIHdvcmsgaW4gdGhlIGNvbXBhbnksIEkgdG9vayBwYXJ0IGFzIGEgRnJvbnRlbmQgZGV2ZWxvcGVyIGluIDUgcHJvamVjdHMuIFRoZXNlIHdlcmUgcHJvamVjdHMgZm9yIGN1c3RvbWVycyBmcm9tIHZhcmlvdXMgY291bnRyaWVzLCBzdWNoIGFzIE5vcndheSwgdGhlIFVTQS4gVGhlc2Ugd2VyZSB2ZXJ5IHZlcnNhdGlsZSBwcm9qZWN0czogZnJvbSBhIHdlYiBhcHBsaWNhdGlvbiBmb3IgZGV0ZXJtaW5pbmcgcG9zc2libGUgYnJlYXN0IGNhbmNlciBpbiB3b21lbiwgdG8gYSBzb2NpYWwgbmV0d29yayBmb3IgcGVvcGxlIHdpdGggY3JlYXRpdmUgcHJvZmVzc2lvbnMgKG11c2ljaWFucywgYXJ0aXN0cywgc2luZ2VycykgYW5kIHNlcnZpY2UgZm9yIGJvb2tpbmcgdGhlIGFwcG9pbnRtZW50IHRpbWUgd2l0aCBhIHZldGVyaW5hcmlhbi4gVGVjaG5vbG9naWVzOiBDb2ZmZWVTY3JpcHQsIEphdmFTY3JpcHQsIEhhbWwsIFNhc3MsIFNjc3MsIEJhY2tib25lLmpzLCBBcGFjaGUgQ29yZG92YSAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZ2hvc3QtY29tcGFueSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5pdmNtZi5ieS9hc3NldHMvdGVtcGxhdGVzL2l2Yy9pbWFnZXMvbG9nby5qcGciLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OgogICAgICAgICAgICAgICAgICAiTG9nbyBmb3IgSW5mb3JtYXRpb24gQ2VudHJlIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZiBCZWxhcnVzIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTM3IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnVsbC13aWR0aCIgfSwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlNvZnR3YXJlIEVuZ2luZWVyIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBJbmZvcm1hdGlvbiBDZW50cmUgb2YgdGhlIE1pbmlzdHJ5IG9mIEZpbmFuY2Ugb2YgdGhlIFJlcHVibGljIG9mIEJlbGFydXMgIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJBdWcgMjAwOCDigJMgSmFuIDIwMTIgKDMgeXJzIDYgbW9zKSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtc3BhY2UtcHJlLXdyYXAgYnJlYWstd29yZHMgdC0xNCB0LWJsYWNrIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7IGRpcjogImx0ciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBJIHdhcyBkZXZlbG9waW5nIG5ldyBmdW5jdGlvbnMgYW5kIHdhcyBzdXBwb3J0aW5nIHRoZSB3b3JrIG9mIHRoZSBzb2Z0d2FyZSBwYWNrYWdlIGZvciB0aGUgTWFpbiBEZXBhcnRtZW50IG9mIEluc3VyYW5jZSBTdXBlcnZpc2lvbiBvZiB0aGUgTWluaXN0cnkgb2YgRmluYW5jZS4gSSB3YXMgYWxzbyBpbnZvbHZlZCBpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIGl2Y21mLmJ5IHdlYnNpdGUsIHN1cHBvcnRpbmcgaXRzIG9wZXJhYmlsaXR5LiBUZWNobm9sb2dpZXM6IERlbHBoaSwgTVNTUUwsIEhUTUwsIENTUywgUEhQICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjUzOCIgfSB9KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjUzOSIgfSB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjU0MCIgfSB9KQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc2VjdGlvbi1jb250YWluZXIgZW1iZXItdmlldyIsCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJlbWJlcjI1NDIiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE4IHQtYmxhY2sgdC1ib2xkIiB9LCBbX3ZtLl92KCJFZHVjYXRpb24iKV0pLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzU2MEJBUUVIM25WUUFjRHpCQS9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1JbDlMOG41UTU4dnd3MXJOajZLLTR0NG1QMHpoODVQd2IyVGZ6QnJSOWxjIiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIFBvbG90c2sgU3RhdGUgVW5pdmVyc2l0eSIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjU0NiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlBvbG90c2sgU3RhdGUgVW5pdmVyc2l0eSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkJhY2hlbG9yIG9mIGluZm9ybWF0aW9uIHRlY2hub2xvZ3ksIFN5c3RlbSBlbmdpbmVlciIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbX3ZtLl92KCIyMDAzIOKAkyAyMDA4IildKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3aGl0ZS1zcGFjZS1wcmUtd3JhcCBicmVhay13b3JkcyB0LTE0IHQtYmxhY2siCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgZGlyOiAibHRyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFBhc3NlZCB0aGUgc3RhdGUgZXhhbSBpbiB0aGUgc3BlY2lhbHR5IHdpdGggYW4gYXNzZXNzbWVudCBvZiBTRVZFTiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI1NDciIH0gfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI1NDgiIH0gfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI1NDkiIH0gfSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3NlY3Rpb24tY29udGFpbmVyIGVtYmVyLXZpZXciLAogICAgICAgIGF0dHJzOiB7IGlkOiAiZW1iZXIyNTUxIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC0xOCB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgX3ZtLl92KCJMaWNlbnNlcyAmIGNlcnRpZmljYXRpb25zIikKICAgICAgICBdKSwKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFFMGlSVXFTSnVlVXcvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9eXdOLWhRUGxwV0FkYkRDbHhSY09JUkx0aE95Rk1PRWg5MlNuczBPdFNSOCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBFRiBTdGFuZGFyZCBFbmdsaXNoIFRlc3QgKEVGIFNFVCkgIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTU1IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEVGIFNFVCBFTkdMSVNIIENFUlRJRklDQVRFIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIkVGIFN0YW5kYXJkIEVuZ2xpc2ggVGVzdCAoRUYgU0VUKSIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgSmFuIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJlZnNldC5vcmcvY2VydC9FOEJMcTMgfCBCMiBVcHBlciBJbnRlcm1lZGlhdGUgfCA1Ni8xMDAiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTU4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEphdmFTY3JpcHQgYW5kIEpTT046IEludGVncmF0aW9uIFRlY2huaXF1ZXMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEphbiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZHB5eUp4bWRJaFRlcXUtaEpjc2RiTU0xRVBUIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjU2MSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBJbnRlcmFjdGl2ZSBBbmltYXRpb25zIHdpdGggQ1NTIGFuZCBKYXZhU2NyaXB0IC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBKYW4gMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWVsY1dXTklEUDlScGNzUnZpVU1iMXhRTW44QSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1NjQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVhY3Q6IEVjb3N5c3RlbXMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEphbiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBUy02V0cyZDB3R0VDZE1TRjdweHg1M0JUVUJkIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjU2NyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBMZWFybmluZyBFQ01BU2NyaXB0IDYgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEphbiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBVEVIN3RiWWNEMlpvM2NCQmZOcEpyV2JETHlQIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjU3MCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBWdWUuanM6IEJ1aWxkaW5nIGFuIEludGVyZmFjZSAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgSmFuIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFaMHBxQThDU2Q0WUpfOFJfcWd1R3QzOURBY3QiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTczIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIENTUzogQW5pbWF0aW9uIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBKYW4gMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVlpSklZU0JfY2YyTXQ1eDk2VFdmNS1CcWpUbyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1NzYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGVhcm5pbmcgd2VicGFjayA0IC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBKYW4gMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVl5a2dHSVc2cFhzZHVZVC1LUzRJWm5uT1ZyNiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1NzkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGVhcm5pbmcgV2ViIEF1ZGlvIGFuZCBWaWRlbyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgSmFuIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFlLXFDRnU2b29vbnhZWDMwdi1jMG1KSkxGYjYiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTgyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIE1FQU4gU3RhY2sgYW5kIE1vbmdvREI6IERldmVsb3BtZW50IFRlY2huaXF1ZXMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEphbiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBY0NEeHh5SmZTYXFmY090Z29mNDRTWERiRmQyIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjU4NSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBKYXZhU2NyaXB0OiBBc3luYyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFTdXdEUHNwaTNvZ2dMUmFDOTBJclJqY3RVaEYiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTg4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEphdmFTY3JpcHQ6IENsb3N1cmVzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVVDcmtZMWZzQklmU0FDMllmOUtfdGh5c05CTyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1OTEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgSmF2YVNjcmlwdDogQmVzdCBQcmFjdGljZXMgZm9yIENvZGUgRm9ybWF0dGluZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFYd0ZNajVTNV8tYnVvd3dEUmhJRko3SkNsS3ciKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNTk0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEphdmFTY3JpcHQ6IFNjb3BlIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVYyRGNnLXdZTEhWaXBUeXpsRVBwN0ZqZS1HUSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI1OTciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgQ1NTIExheW91dHM6IEZyb20gRmxvYXQgdG8gRmxleGJveCBhbmQgR3JpZCAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFhM0x6V0VxMDU0dGoyVnRITldNX0pFc2hfOEsiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjAwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBMZWFybmluZyBGdW5jdGlvbmFsIFByb2dyYW1taW5nIHdpdGggSmF2YVNjcmlwdCBFUzYrIC0gIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBWTEwcnYxYU9lZzR4bVJtYmVTaDhmUFpiak5TIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYwMyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBCdWlsZGluZyBSRVNUZnVsIEFQSXMgd2l0aCBOb2RlLmpzIGFuZCBFeHByZXNzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWJpM0w1WlMtdG8zb1lwaUV1MmJBNVV4MVIxMCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2MDYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIEJ1aWxkaW5nIGEgV2Vic2l0ZSB3aXRoIE5vZGUuanMgYW5kIEV4cHJlc3MuanMgKDIwMTgpIC0gIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZlJYb1lLVjduTE1INUFkQWU4SUJNY0tYbzRhIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYwOSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBJc29tb3JwaGljIEphdmFTY3JpcHQgd2l0aCBNRVZOIFN0YWNrIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVpLVjhPRGpWZXZwaWZ0Z19Lai1fcHBGU1NONiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2MTIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGVhcm5pbmcgVnVlLmpzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVI3M0xlTE9HVmE2cTNTVTVubnlGRUlpakZkTyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2MTUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgVnVlLmpzIEVzc2VudGlhbCBUcmFpbmluZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFXNmFrSHFjZEdMemE5Q3VIbVBwTER2OHpxdk0iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjE4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIExlYXJuaW5nIFR5cGVTY3JpcHQgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBV2kyNkp6enNaTG5IRk12X1RVSzczYzV0ek1pIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYyMSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBWdWUuanM6IEZ1bGwtU3RhY2sgQXBwbGljYXRpb25zIHdpdGggRmlyZWJhc2UgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBVEtYU2tvOVVra2w1TUhKQW1pSzNadWJKbDk3IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYyNCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBMZWFybmluZyBWdWV4IC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWNMa0hPRGRWNFpZdHJ5eTBxRnlRTWowLV9wUiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2MjciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgQmVjb21lIGEgVnVlLmpzIERldmVsb3BlciAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFjTXR5WFA2M1NacUhMdThIb3JEODlsNEdmWmYiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjMwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEphdmFTY3JpcHQgRXNzZW50aWFsIFRyYWluaW5nIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVZleXBhNDhZamdTQmJ0M090YngxVG1JenZJdCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2MzMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGVhcm5pbmcgdGhlIEphdmFTY3JpcHQgTGFuZ3VhZ2UgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBWFNaMFFfTTM1ajlaUktfc3k5RTl4MzZvblUzIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYzNiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBSZWFjdDogQ3JlYXRpbmcgYW5kIEhvc3RpbmcgYSBGdWxsLVN0YWNrIFNpdGUgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZV9WVURBenZhcWl5NmpKTV82SDJOMnRJaWQwIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjYzOSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBCb290c3RyYXAgNCBFc3NlbnRpYWwgVHJhaW5pbmcgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZTJzMFNsZzBBSzdpOHJuSm9TTFZHeVFXc3lBIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY0MiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBWdWUuanM6IFdvcmtpbmcgd2l0aCBBUElzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWVRLWxPSjZPcVV0VHAtTFFKVDM4dWtlWXhHWiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2NDUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIFN1Y2NlZWRpbmcgaW4gV2ViIERldmVsb3BtZW50OiBGdWxsIFN0YWNrIGFuZCBGcm9udCBFbmQgLSAiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFjYllPRWhiR0dnNjJ4RUpTRENRMl9hR0pqZVIiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjQ4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFdlYiBQcm9ncmFtbWluZyBGb3VuZGF0aW9ucyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFjNVlGTjdxM21ycDlkLUVmWUd2bUM4X2JDUHQiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjUxIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIENTUyBFc3NlbnRpYWwgVHJhaW5pbmcgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZG4xV3VkRGlnSHhPb0NsYWtXR2pNRzB1dHFUIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY1NCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBQcm9ncmFtbWluZyBGb3VuZGF0aW9uczogRnVuZGFtZW50YWxzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVozSExUWFFIWFJESGJkM0NfS3hucFd2eENjbyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2NTciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgVVggRm91bmRhdGlvbnM6IEFjY2Vzc2liaWxpdHkgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZmpKTHhzX3B2M0diMUZ4QmNib05taTdzaUR1IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY2MCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBTYXNzIEVzc2VudGlhbCBUcmFpbmluZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFYM0VGbHVYejBiOU1XVi1mS2VwU1dsaFJsVTUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjYzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEhUTUwgRXNzZW50aWFsIFRyYWluaW5nIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWZiZmQtUHYzZWpoM2VVeHpsVGt6eFR5QWlKSSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2NjYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGVhcm5pbmcgUmVhY3QuanMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBYmkzeE9wNzYyMHZwY1NQLXZVVG5JQjJieFNQIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY2OSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBMZWFybmluZyBHaXRIdWIgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBUlZMbXpVNEVONTR4OG1faUd0M2Jfcm40STAzIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY3MiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBSZXNwb25zaXZlIExheW91dCAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFaaUktUmF3SThWaGFWbG1NUHJYTlg0b0dYa2UiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjc1IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIEJlY29tZSBhIEZyb250LUVuZCBXZWIgRGV2ZWxvcGVyIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVVMQU1IM09EbEtpaW5ZUEpnZTVQcUxjTXdXNCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2NzgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgQ1NTOiBBZHZhbmNlZCBMYXlvdXRzIHdpdGggR3JpZCAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFaSnpIUnNjWGlLN1ZTUDJJSlRxV3ROQm9qenMiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjgxIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFVzZXIgRXhwZXJpZW5jZSBmb3IgV2ViIERlc2lnbiAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFmakpMeHNfcHYzR2IxRnhCY2JvTm1pN3NpRHUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNjg0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIE1FUk4gRXNzZW50aWFsIFRyYWluaW5nIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWFPRzFuenJwWVVOUUNtNmt6QkU2cjM0RENBVyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2ODciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgQW5ndWxhcjogQnVpbGRpbmcgYW4gSW50ZXJmYWNlIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWEzWlotZkRQRU5YeVBoUGdHak5URXI4M3RTRyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2OTAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVhY3QuanMgRXNzZW50aWFsIFRyYWluaW5nIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVdfNmlQRExKZTU1d29aVGdPQnJ5ZDdvRzlVXyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2OTMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgV2VicGFjayBmb3IgUmVhY3QgQXBwbGljYXRpb25zIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVlqMmhpLTRuR1hVNzl5MmN0dnJidWRCY25kRSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI2OTYiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVhY3Q6IFVzaW5nIFR5cGVTY3JpcHQgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZlhkVzVyZVhKdDJIaXBMR3VBZGRpeFF4Q2x0IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjY5OSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBSZWFjdDogQnVpbGRpbmcgTGFyZ2UgQXBwcyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFXend2NkVTV1F3NXNMYzYzMlYxdWl0UEpWZDIiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzAyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFJlYWN0OiBSZXBsYWNpbmcgTGVnYWN5IFByb2plY3RzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVRZeGVZNjV4VXI0UjJDa0Z0VU45WU9vTWlVRSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI3MDUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVhY3Q6IFRlc3RpbmcgYW5kIERlYnVnZ2luZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFZZ1NOaFk0R0t6cVVTSmExUEYwVWh5aEVBQUwiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzA4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFJlYWN0IGZvciBXZWIgRGVzaWduZXJzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVRNc3VhYzZXYzJXaHdYNXJhTFlKRkcxRmNHbCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI3MTEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgR3VscC5qczogV2ViIFByb2plY3QgV29ya2Zsb3dzIC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQWJ0OUJjWEphSFluZFBlcjhNdXRLSG1sNF9XNiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI3MTQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgSmF2YVNjcmlwdDogTW9kZXJuIEJyb3dzZXIgQVBJcyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFSbzNEejVlOFlvZ0UzMkJwUTRPLWFTc0tmN3QiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzE3IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFR5cGVTY3JpcHQ6IFVwZ3JhZGVzIGFuZCBGZWF0dXJlcyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFYSmh5dUNsV2U4Rm5lRXlQMWQ4YkNRYXBaWFoiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzIwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIExlYXJuaW5nIEZ1bmN0aW9uYWwgUHJvZ3JhbW1pbmcgd2l0aCBKYXZhU2NyaXB0IC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBGZWIgMjAyMCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNyZWRlbnRpYWwgSUQgQVRoOGNEMTRjamRObG9jZGE1ckhqeXR4OGFUaCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInJlc3VtZS1idWlsZGVyX19zdWJzZWN0aW9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxleC1zaHJpbmstemVybyBtcjIgbGF6eS1pbWFnZSBlbWJlci12aWV3IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgd2lkdGg6ICIyNCIsCiAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICJodHRwczovL21lZGlhLWV4cDEubGljZG4uY29tL2Rtcy9pbWFnZS9DNEQwQkFRR3lPV3ZyNFcwUG93L2NvbXBhbnktbG9nb18xMDBfMTAwLzA/ZT0xNjAxNTEwNDAwJnY9YmV0YSZ0PXE2Qm1UVXJQenJOZEhhWG5GV0lZTFpSejd0QzNqaV9VeFVYWk5Ua3NfdTgiLAogICAgICAgICAgICAgICAgbG9hZGluZzogImxhenkiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiLAogICAgICAgICAgICAgICAgYWx0OiAiTG9nbyBmb3IgTGlua2VkSW4iLAogICAgICAgICAgICAgICAgaWQ6ICJlbWJlcjI3MjMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidC0xNiB0LWJsYWNrIHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgVmFuaWxsYSBKYXZhU2NyaXB0OiBDbGllbnQtU2lkZSBEYXRhIFN0b3JhZ2UgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ3JlZGVudGlhbCBJRCBBZUFxWktvamFQQ0NlYzNZeDlwSWEyRnI3V05QIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjcyNiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBUeXBlU2NyaXB0IEVzc2VudGlhbCBUcmFpbmluZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDcmVkZW50aWFsIElEIEFZd1JPYzhZaDhjQm92NDFaTy1nZjJ1QW9TUnciKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzI5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFZhbmlsbGEgSmF2YVNjcmlwdDogV2ViIFdvcmtlcnMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjczMiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBWdWUuanMgZm9yIFdlYiBEZXNpZ25lcnMgLSAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInQtbm9ybWFsIiB9LCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE0IHQtYmxhY2siIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSXNzdWVkIEZlYiAyMDIwIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3N1YnNlY3Rpb24tY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmbGV4LXNocmluay16ZXJvIG1yMiBsYXp5LWltYWdlIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjI0IiwKICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWVkaWEtZXhwMS5saWNkbi5jb20vZG1zL2ltYWdlL0M0RDBCQVFHeU9XdnI0VzBQb3cvY29tcGFueS1sb2dvXzEwMF8xMDAvMD9lPTE2MDE1MTA0MDAmdj1iZXRhJnQ9cTZCbVRVclB6ck5kSGFYbkZXSVlMWlJ6N3RDM2ppX1V4VVhaTlRrc191OCIsCiAgICAgICAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIyNCIsCiAgICAgICAgICAgICAgICBhbHQ6ICJMb2dvIGZvciBMaW5rZWRJbiIsCiAgICAgICAgICAgICAgICBpZDogImVtYmVyMjczNSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE2IHQtYmxhY2sgdC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBBbmd1bGFyIEVzc2VudGlhbCBUcmFpbmluZyAtICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidC1ub3JtYWwiIH0sIFtfdm0uX3YoIkxpbmtlZEluIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJc3N1ZWQgRmViIDIwMjAiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc3Vic2VjdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZsZXgtc2hyaW5rLXplcm8gbXIyIGxhenktaW1hZ2UgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMjQiLAogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZWRpYS1leHAxLmxpY2RuLmNvbS9kbXMvaW1hZ2UvQzREMEJBUUd5T1d2cjRXMFBvdy9jb21wYW55LWxvZ29fMTAwXzEwMC8wP2U9MTYwMTUxMDQwMCZ2PWJldGEmdD1xNkJtVFVyUHpyTmRIYVhuRldJWUxaUno3dEMzamlfVXhVWFpOVGtzX3U4IiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6ICJsYXp5IiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjI0IiwKICAgICAgICAgICAgICAgIGFsdDogIkxvZ28gZm9yIExpbmtlZEluIiwKICAgICAgICAgICAgICAgIGlkOiAiZW1iZXIyNzM4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogInQtMTYgdC1ibGFjayB0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFJlYWN0OiBTdGF0ZSBNYW5hZ2VtZW50IC0gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0LW5vcm1hbCIgfSwgW192bS5fdigiTGlua2VkSW4iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidC0xNCB0LWJsYWNrIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIklzc3VlZCBNYXIgMjAyMCIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI3MzkiIH0gfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI3NDAiIH0gfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbWJlci12aWV3IiwgYXR0cnM6IHsgaWQ6ICJlbWJlcjI3NDEiIH0gfSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXJfX3NlY3Rpb24tY29udGFpbmVyIGVtYmVyLXZpZXciLAogICAgICAgIGF0dHJzOiB7IGlkOiAiZW1iZXIyNzQyIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidC0xOCB0LWJsYWNrIHQtYm9sZCIgfSwgW192bS5fdigiU2tpbGxzIildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInQtMTQgdC1ibGFjayBwdjQgcGw2IiB9LCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkhUTUwvSFRNTDUiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkNTUy9DU1MzIChQYXNzZWQgTGlua2VkSW4gQXNzZXNzbWVudHMpIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXItc2tpbGwtc2VjdGlvbl9fc2tpbGwiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJKYXZhU2NyaXB0IChQYXNzZWQgTGlua2VkSW4gQXNzZXNzbWVudHMpIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXItc2tpbGwtc2VjdGlvbl9fc2tpbGwiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJWdWUuanMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlJlYWN0LmpzIChQYXNzZWQgTGlua2VkSW4gQXNzZXNzbWVudHMpIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAicmVzdW1lLWJ1aWxkZXItc2tpbGwtc2VjdGlvbl9fc2tpbGwiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJGcm9udC1lbmQgRGV2ZWxvcG1lbnQiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIkNTUyBBbmltYXRpb24iKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIk5vZGUuanMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlci1za2lsbC1zZWN0aW9uX19za2lsbCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlJFU1QiKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjc1MyIgfSB9KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjc1NCIgfSB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVtYmVyLXZpZXciLCBhdHRyczogeyBpZDogImVtYmVyMjc1NSIgfSB9KQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJyZXN1bWUtYnVpbGRlcl9fc2VjdGlvbi1jb250YWluZXIgZW1iZXItdmlldyIsCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJlbWJlcjI3NTYiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJ0LTE4IHQtYmxhY2sgdC1ib2xkIiB9LCBbX3ZtLl92KCJQcm9qZWN0cyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAidWwiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnRzLWJsb2NrX19saXN0IHB2LWFjY29tcGxpc2htZW50cy1ibG9ja19fbGlzdC0taGFzLW1vcmUiCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1maXJzdCBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIyMTA1NDA5NzE4IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgRXhwYW5kYWJsZSBiYW5uZXIgZm9yIHNtYXJ0IGRldmljZXMgKHBob25lLCB0YWJsZXQgYW5kIHNvIG9uZSkgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRGVjIDIwMTkg4oCTIEZlYiAyMDIwIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IGRlc2NyaXB0aW9uIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEEgc21hbGwgYW5kIGZ1bm55IGJhbm5lciBmb3IgbW9iaWxlIGRldmljZXMgb25seS4gWW91IGNhbiB0YXAgb24gdGhlIHNtYWxsIHBpY3R1cmUgb3IgcHVsbCBhIHNtYWxsIHBpY3R1cmUgZG93biBpbiBvcmRlciB0byBzaG93IGEgYmlnIHBpY3R1cmUuIEFsc28sIHlvdSBjYW4gdGFwIG9uIGEgYnV0dG9uIHRvIGV4cGFuZCB0aGUgYmFubmVyIChzaG93IGEgYmlnIHBpY3R1cmUpLiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiV2hlbiB0aGUgYmlnIHBpY3R1cmUgaXMgc2hvd24sIHlvdSBjb3VsZCB0YXAgb24gYSBiaWcgcGljdHVyZS4gV2hlbiB5b3Ugd2lsbCB0YXAgb24gYSBiaWcgcGljdHVyZSwgdGhlbiB5b3Ugd2lsbCBiZSByZWRpcmVjdGVkIGJ5IGxpbmsuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL2V4cGFuZGFibGUtYmFubmVyLyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlNlZSBwcm9qZWN0IEV4cGFuZGFibGUgYmFubmVyIGZvciBzbWFydCBkZXZpY2VzIChwaG9uZSwgdGFibGV0IGFuZCBzbyBvbmUpIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby9leHBhbmRhYmxlLWJhbm5lci8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjE2NTE1MjUxNDIiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUmVzaXN0YW5jZSBpcyBmdXRpbGUgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VwIDIwMTkiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgZGVzY3JpcHRpb24iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBpcyBhIHNwZWNpYWwgcHJvamVjdCBvbiB0aGUgVFVULkJZIHBvcnRhbCAtIHRoZSBzdG9yaWVzIG9mIHBlb3BsZSB3aG8gcmVwb3J0ZWQgcG9saWNlIHZpb2xlbmNlIGluIEJlbGFydXMuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3NwZWNpYWwudHV0LmJ5L3N0YXR1cy9zb3Byb3RpdmxlbmllX2Jlc3BvbGV6bm8vIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWUgcHJvamVjdCBSZXNpc3RhbmNlIGlzIGZ1dGlsZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBodHRwczovL3NwZWNpYWwudHV0LmJ5L3N0YXR1cy9zb3Byb3RpdmxlbmllX2Jlc3BvbGV6bm8vICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIxNDczMTY5MDI5IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEdyZWV0aW5nIGNhcmQgd2l0aCBhIGhvbGlkYXkgb24gTWFyY2ggOCAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNYXIgMjAxOSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBodHRwOi8vbWFya2V0aW5nLmJ5L2tleXN5L211enlrYWxueWUta2xpcHktYW5nZWx5LWktdm9zbWVya2EtaXotem9udG92LWthay1iZWxhcnVza2llLWtvbXBhbmlpLXBvemRyYXZseWF5dXQtemhlbnNoY2hpbi8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdHV0LTIwMTktOG1hcmNoLWpzLyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlNlZSBwcm9qZWN0IEdyZWV0aW5nIGNhcmQgd2l0aCBhIGhvbGlkYXkgb24gTWFyY2ggOCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIGh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdHV0LTIwMTktOG1hcmNoLWpzLyAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMTE4NDk3Nzc1MiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBuYW1lIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDaHJpc3RtYXMnIHNsb3QgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRGVjIDIwMTgiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgZGVzY3JpcHRpb24iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgQSBtb2RpZmllZCBzbG90IG1hY2hpbmUgaWRlYSB3YXMgaW1wbGVtZW50ZWQgaW4gYW4gaW50ZXJhY3RpdmUgb25saW5lIHBvc3RjYXJkIGZvciBhbGwgcG9ydGFsIHVzZXJzLiBBY3R1YWxseSwgdGhpcyBpcyBhIGdyZWV0aW5nIGdlbmVyYXRvciBmb3IgYSBoYXBweSBuZXcgeWVhci4gIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgInNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3ZhbGVyeWthdHNrZWwvaGFwcHktbmV3LXllYXItMjAxOSAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiaW5mbzogaHR0cDovL21hcmtldGluZy5ieS9rZXlzeS90dXQtYnktemFwdXN0aWwtaW50ZXJha3Rpdm55ZS1wcmVkc2themFuaXlhLW5hLWJ1ZHVzaGNoaXktZ29kLXMtc2ltdm9sYW1pLWJlbGFydXNrb2dvLW9ybmFtZW50YS8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LnR1dC5ieS9OWTIwMTkvIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWUgcHJvamVjdCBDaHJpc3RtYXMnIHNsb3QiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGh0dHBzOi8vd3d3LnR1dC5ieS9OWTIwMTkvICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIxMDQ2MTQ2OTUxIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICcgU3BlY2lhbCBwcm9qZWN0IG9mIHRoZSB3ZWIgcG9ydGFsIFRVVC5CWSAiQ2l0eSBEYXksIE1pbnNrIGlzIDk1MCB5ZWFycyBvbGQiICcKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNlcCAyMDE3IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IGRlc2NyaXB0aW9uIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBjYXBpdGFsIG9mIEJlbGFydXMsIHRoZSBjaXR5IG9mIE1pbnNrLCBjZWxlYnJhdGVzIGl0cyA5NTB0aCBhbm5pdmVyc2FyeSBpbiAyMDE3LiBUVVQuQlkgcmVsZWFzZWQgYSBzcGVjaWFsIHByb2plY3QgZXNwZWNpYWxseSBmb3IgdGhpcyBkYXRlLiBBIHNwZWNpYWwgcHJvamVjdCB0ZWxscyBzZXZlcmFsIHN0b3JpZXMgcmVsYXRlZCB0byB0aGUgbGlmZSBvZiB0aGUgY2l0eS4gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbmV3cy50dXQuYnkvdGFnLzI0NTAtZGVuLWdvcm9kYS5odG1sIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAnU2VlIHByb2plY3QgU3BlY2lhbCBwcm9qZWN0IG9mIHRoZSB3ZWIgcG9ydGFsIFRVVC5CWSAiQ2l0eSBEYXksIE1pbnNrIGlzIDk1MCB5ZWFycyBvbGQiJwogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGh0dHBzOi8vbmV3cy50dXQuYnkvdGFnLzI0NTAtZGVuLWdvcm9kYS5odG1sICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIxMzMwMzA1NjYyIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRpYyB0YWMgdG9lIGdhbWUgb24gSmF2YVNjcmlwdCAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJBdWcgMjAxNiIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBBIHNtYWxsIGdhbWUgdGljIHRhYyB0b2UuIFVubGlrZSB0aGUgc3RhbmRhcmQgNXg1IGdhbWUgYXJlYSwgdGhlIHRlc3QgdGFzayBoYWQgYSBjb25kaXRpb24gdGhhdCB0aGUgcGxheWluZyBmaWVsZCBzaG91bGQgaGF2ZSBhIHNpemUgb2YgMTl4MTkuIFRoZSB3aW5uZXIgaXMgZGV0ZXJtaW5lZCB3aGVuIDUgY3Jvc3NlcyBvciA1IHplcm9lcyBhcmUgY3Jvc3NlZCBvdXQuIE9uZSBvZiB0aGUgY29uZGl0aW9ucyBvZiB0aGUgYXNzaWdubWVudCB3YXMgbm90IHRvIHVzZSBhbnkgZnJhbWV3b3JrLiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby90aWMtdGFjLXRvZS8iLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlZSBwcm9qZWN0IFRpYyB0YWMgdG9lIGdhbWUgb24gSmF2YVNjcmlwdCIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby90aWMtdGFjLXRvZS8gIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjIwMDE3NDg0MzciIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTWV6dWthIExMQyAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJNYXkgMjAxNSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBTdGFjayBvZiB0ZWNobm9sb2dpZXM6IFJ1YnksIEFuZ3VsYXIsIFNhc3MsIEhhbWwuICIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJJIHdhcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgbmV3IEhUTUwgbWFya3VwcyAoZW1haWwgdGVtcGxhdGVzIGluY2x1ZGVkKSwgbWFrZSBzb21lIGNoYW5nZXMgaW4gQW5ndWxhciBkaXJlY3RpdmVzLiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL21lenVrYS5jb20iLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlZSBwcm9qZWN0IE1lenVrYSBMTEMiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5tZXp1a2EtbWFpbC8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly9tZXp1a2EuY29tIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWUgcHJvamVjdCBNZXp1a2EgTExDIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBodHRwOi8vbWV6dWthLmNvbSAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMTMzMTI4NDE1MCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBuYW1lIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBCdWJibGVib29tLmJ5ICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk9jdCAyMDE0IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IGRlc2NyaXB0aW9uIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFVuZm9ydHVuYXRlbHksIHRoaXMgcHJvamVjdCBpcyBubyBsb25nZXIgYWxpdmUsIGJ1dCB3b3JrIChIVE1MIG1hcmt1cCkgd2FzIGRvbmUgYW5kIHlvdSBjYW4gc2VlIGl0IGluIG15IEdpdEh1YiByZXBvc2l0b3J5IGh0dHBzOi8vZ2l0aHViLmNvbS92YWxlcnlrYXRza2VsL3ZhbHByb2plY3RzLmJ1YmJsZWJvb20gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdmFscHJvamVjdHMuYnViYmxlYm9vbS8iLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlZSBwcm9qZWN0IEJ1YmJsZWJvb20uYnkiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5idWJibGVib29tLyAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMTUxNjc3OTI0IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE1JQlMgVHJhdmVsICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkFwciAyMDEwIOKAkyBOb3YgMjAxMyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBDdXJyZW50bHksIG9uIHRoZSBzcGVjaWZpZWQgZG9tYWluLCB5b3UgY2FuIHNlZSBhIHdlYiBzaXRlIGFmdGVyIHRoZSByZWRlc2lnbi4gQnV0IHlvdSBjYW4gc2VlIHNhdmVkIHZlcnNpb24gb24gd2ViLmFyY2hpdmUub3JnIHdoaWNoIEkndmUgZGV2ZWxvcGVkICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vd3d3Lm1pYnMucnUvIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWUgcHJvamVjdCBNSUJTIFRyYXZlbCIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiB3ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTEwODE2MTIwNTUyL2h0dHA6Ly93d3cubWlicy5ydS8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjEzMzYzNjcwNzYiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZGVjb3Itdi1kb20ucnUgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQXVnIDIwMTMiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgZGVzY3JpcHRpb24iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyB3YXMgYSBzbWFsbCBsYW5kaW5nIHBhZ2UuIE5vd2FkYXlzIHRoaXMgY29tcGFueSBpcyBubyBsb25nZXIgYWxpdmUuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLmRlY29yLXYtZG9tLyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2VlIHByb2plY3QgZGVjb3Itdi1kb20ucnUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5kZWNvci12LWRvbS8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjIwNjY2MDk3ODIiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTmVrb3MsIHRoZSBBZHZlcnRpc2luZyBhZ2VuY3kgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiSmFuIDIwMTMg4oCTIEp1biAyMDEzIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGVzY3JpcHRpb24gdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IGRlc2NyaXB0aW9uIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFdoaWxlIHdvcmtpbmcgb24gdGhpcyBwcm9qZWN0LCBJIHNlcnZlZCBhcyBhIGZ1bGwtc3RhY2sgZGV2ZWxvcGVyLiBGcm9udGVuZCAoSFRNTCBsYXlvdXQgKyBqUXVlcnkpIEJhY2tlbmQgKE1PRHgsIE15U1FMIGRhdGFiYXNlKSAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19leHRlcm5hbC1zb3VyY2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL25la29zLnJ1LyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2VlIHByb2plY3QgTmVrb3MsIHRoZSBBZHZlcnRpc2luZyBhZ2VuY3kiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGh0dHA6Ly9uZWtvcy5ydS8gIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjI3IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIENyb3NzQXJ0cyAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZGF0ZSB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJKdWwgMjAxMiDigJMgTWF5IDIwMTMiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgZGVzY3JpcHRpb24iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFNvY2lhbCBuZXR3b3JrIGZvciBjcmVhdGl2ZSBwZW9wbGUgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIkJ1aWx0IG9uIFJvUiB1c2luZyBzY3J1bSwgc2FzcywgY29mZmVlc2NyaXB0LCBzcGluZSwgZXRjICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWV4cGFuZGVkIGVtYmVyLXZpZXciLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICIxMjgyNDA1NDUiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBPZmZpY2lhbCB3ZWJzaXRlIG9mIEluZm9ybWF0aW9uIGFuZCBDb21wdXRpbmcgQ2VudGVyIG9mIHRoZSBNaW5pc3RyeSBvZiBGaW5hbmNlIG9mIHRoZSBSZXB1YmxpYyBvZiBCZWxhcnVzICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkF1ZyAyMDA4IOKAkyBEZWMgMjAxMSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBUb2RheSB0aGlzIHdlYnNpdGUgbG9va3MgZGlmZmVyZW50LiBCdXQgeW91IGNhbiBzZWUgdGhlIHByZXZpb3VzIHZlcnNpb24gb24gd2ViLmFyY2hpdmUub3JnLCB3aGljaCBJJ3ZlIGNyZWF0ZWQgIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lml2Y21mLmJ5LyIsCiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIlNlZSBwcm9qZWN0IE9mZmljaWFsIHdlYnNpdGUgb2YgSW5mb3JtYXRpb24gYW5kIENvbXB1dGluZyBDZW50ZXIgb2YgdGhlIE1pbmlzdHJ5IG9mIEZpbmFuY2Ugb2YgdGhlIFJlcHVibGljIG9mIEJlbGFydXMiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDExMDEyNjAyMTgxMC9odHRwOi8vd3d3Lml2Y21mLmJ5LyAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5IHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0td2l0aC1zZXBhcmF0b3IgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMTA0NjU5OTUyIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X190aXRsZSB0LTE0IHQtYm9sZCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIHJlbW1vLmJ5ICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1heSAyMDExIOKAkyBPY3QgMjAxMSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgVGhlIHN0YWNrIG9mIHRlY2hub2xvZ2llczogQ1NTLCBIVE1MLCBQaG90b3Nob3AgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIkkgd2FzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBuZXcgSFRNTCBsYXlvdXRzIHVzaW5nICouUFNEIHNvdXJjZXMuICIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJPcmlnaW5hbCBwcm9qZWN0IHJlbW1vLmJ5IHdhcyByZW1vdmVkIGF0IHRoaXMgdGltZSAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiQnV0IFlvdSBjYW4gc2VlIGEgc2F2ZWQgdmVyc2lvbiBvbiB3ZWIuYXJjaGl2ZS5vcmcgIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIk9yaWdpbmFsIGRlc2lnbiBieSBSdXNldHNreSBSdXNsYW4gYWthIHJkZXNpZ25lciBpcyBoZXJlOiBodHRwOi8vYXJjaGl2ZS5yZGVzaWduZXIucnUvY29tcG9uZW50L29wdGlvbixjb21fanBvcnRmb2xpby9JdGVtaWQsMzAvY2F0LDE0MC8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTIwNTIyMTcxNzAzL2h0dHA6Ly9yZW1tby5ieS8iLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlZSBwcm9qZWN0IHJlbW1vLmJ5IikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIGh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTIwNTIyMTcxNzAzL2h0dHA6Ly9yZW1tby5ieS8gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgInB2LWFjY29tcGxpc2htZW50LWVudGl0eSBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLXdpdGgtc2VwYXJhdG9yIHB2LWFjY29tcGxpc2htZW50LWVudGl0eS0tZXhwYW5kZWQgZW1iZXItdmlldyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIjEyNjM0MzA1NDkiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX3RpdGxlIHQtMTQgdC1ib2xkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQXZhbCBJbnZlc3QgUmVhbHR5ICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kYXRlIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkZlYiAyMDEwIOKAkyBKYW4gMjAxMSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2Rlc2NyaXB0aW9uIHQtMTQiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBkZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBUaGlzIGlzIG9uZSBvZiBteSBmaXJzdCBwcm9qZWN0cy4gSXQgd2FzIGFuIEFwcmlsIG9mIDIwMTAuLi4gSXQgd2FzIGFuIElFNidzIHRpbWUuLi4gSXQgd2FzIGZ1bGwgb2YgZW5lcmd5IGFuZCBpdCB3YXMgbmVjZXNzYXJ5IHRvIHRha2UgaW50byBhY2NvdW50IGhpcyB3aXNoZXMgbGlrZSBhcyBQTkcsIG1heC13aWR0aCBhbmQgbW9yZSBhbmQgbW9yZS4uLiBOb3dhZGF5cyB0aGlzIGNvbXBhbnkgYW5kIGl0cyB3ZWJzaXRlcyBhcmUgbm8gbG9uZ2VyIGFsaXZlLiBJIGRlcGxveWVkIGEgYmFja3VwICh0aGUgbGF0ZXN0IHZlcnNpb24gdGhhdCBJIGhhZCkgdG8gc2hvdyB0aGUgd29yayB0aGF0IEkgZGlkLiBUaGlzIGlzIE9OTFkgREVNTywgTk9UIFJFQUwgU0VSVklDRS4gWW91IGNhbiBzZWUgc291cmNlIGZvcm0gSFRNTCBtYXJrdXAgb24gR2l0SHViIGh0dHBzOi8vZ2l0aHViLmNvbS92YWxlcnlrYXRza2VsL3ZhbHByb2plY3RzLmF2YWwgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fZXh0ZXJuYWwtc291cmNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdmFsZXJ5a2F0c2tlbC5naXRodWIuaW8vdmFscHJvamVjdHMuYXZhbC8iLAogICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNlZSBwcm9qZWN0IEF2YWwgSW52ZXN0IFJlYWx0eSIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLmF2YWwvICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHkgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS13aXRoLXNlcGFyYXRvciBwdi1hY2NvbXBsaXNobWVudC1lbnRpdHktLWxhc3QgcHYtYWNjb21wbGlzaG1lbnQtZW50aXR5LS1leHBhbmRlZCBlbWJlci12aWV3IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiMTQ0NzI1MjQ1MCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoNCIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInB2LWFjY29tcGxpc2htZW50LWVudGl0eV9fdGl0bGUgdC0xNCB0LWJvbGQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ2aXN1YWxseS1oaWRkZW4iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBuYW1lIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDbGluaWMgb2YgRHIuIE5hbWlub3YgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2RhdGUgdC0xNCIgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VwIDIwMTAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHYtYWNjb21wbGlzaG1lbnQtZW50aXR5X19kZXNjcmlwdGlvbiB0LTE0IiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidmlzdWFsbHktaGlkZGVuIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgZGVzY3JpcHRpb24iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBIVE1MIG1hcmt1cCB3YXMgZG9uZSBpbiBTZXB0ZW1iZXIgb2YgMjAxMC4gSXQgd2FzIG9ubHkgb25lIHBhZ2UsIHRoZSBob21lIHBhZ2UuICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwdi1hY2NvbXBsaXNobWVudC1lbnRpdHlfX2V4dGVybmFsLXNvdXJjZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3ZhbGVyeWthdHNrZWwuZ2l0aHViLmlvL3ZhbHByb2plY3RzLm5hbWlub3YvIiwKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInZpc3VhbGx5LWhpZGRlbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWUgcHJvamVjdCBDbGluaWMgb2YgRHIuIE5hbWlub3YiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgaHR0cHM6Ly92YWxlcnlrYXRza2VsLmdpdGh1Yi5pby92YWxwcm9qZWN0cy5uYW1pbm92LyAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}